"use client";
import React, { useState } from "react";
import ComponentCard from "@/components/common/ComponentCard";
import {
  Table,
  TableBody,
  TableCell,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import Badge from "@/components/ui/badge/Badge";
import Button from "@/components/ui/button/Button";
import { Modal } from "@/components/ui/modal";
import Form from "@/components/form/Form";
import ExportWithDateRange, { ExportDateRange } from "@/components/common/ExportWithDateRange";
import { exportAdminData } from "@/lib/api/importExport";
import { useToast } from "@/context/ToastContext";

interface BalanceTransaction {
  id: number;
  clientName: string;
  clientPhone: string;
  clientEmail: string;
  amount: number;
  type: "topup" | "payment" | "refund";
  status: "–í—ã–ø–æ–ª–Ω–µ–Ω" | "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ" | "–û—Ç–º–µ–Ω–µ–Ω";
  method: "–ù–∞–ª–∏—á–Ω—ã–µ" | "–ö–∞—Ä—Ç–∞" | "–ü–µ—Ä–µ–≤–æ–¥" | "–¢–µ—Ä–º–∏–Ω–∞–ª";
  description: string;
  createdAt: string;
  processedBy: string;
}

// Mock –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
const mockTransactions: BalanceTransaction[] = [
  {
    id: 1,
    clientName: "–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á",
    clientPhone: "+7 (912) 345-67-89",
    clientEmail: "ivanov@email.com",
    amount: 5000,
    type: "topup",
    status: "–í—ã–ø–æ–ª–Ω–µ–Ω",
    method: "–ù–∞–ª–∏—á–Ω—ã–µ",
    description: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏",
    createdAt: "2024-03-15T10:30:00",
    processedBy: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
  },
  {
    id: 2,
    clientName: "–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞",
    clientPhone: "+7 (923) 456-78-90",
    clientEmail: "sidorova@email.com",
    amount: 12500,
    type: "payment",
    status: "–í—ã–ø–æ–ª–Ω–µ–Ω",
    method: "–ö–∞—Ä—Ç–∞",
    description: "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ12345",
    createdAt: "2024-03-15T11:15:00",
    processedBy: "–ö–∞—Å—Å–∏—Ä"
  },
  {
    id: 3,
    clientName: "–ü–µ—Ç—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á",
    clientPhone: "+7 (934) 567-89-01",
    clientEmail: "petrov@email.com",
    amount: 2500,
    type: "refund",
    status: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
    method: "–ü–µ—Ä–µ–≤–æ–¥",
    description: "–í–æ–∑–≤—Ä–∞—Ç –∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä",
    createdAt: "2024-03-15T12:00:00",
    processedBy: "–ú–µ–Ω–µ–¥–∂–µ—Ä"
  }
];

const BalanceManagementPage = () => {
  const [isTopupModalOpen, setIsTopupModalOpen] = useState(false);
  const [isPaymentModalOpen, setIsPaymentModalOpen] = useState(false);
  const [selectedClient, setSelectedClient] = useState<string>("");
  const [amount, setAmount] = useState<string>("");
  const [paymentMethod, setPaymentMethod] = useState<string>("–ù–∞–ª–∏—á–Ω—ã–µ");
  const [description, setDescription] = useState<string>("");
  const { success: showSuccess, error: showError } = useToast();

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      minimumFractionDigits: 0
    }).format(amount);
  };

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "–í—ã–ø–æ–ª–Ω–µ–Ω":
        return <Badge color="success" variant="light">–í—ã–ø–æ–ª–Ω–µ–Ω</Badge>;
      case "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ":
        return <Badge color="warning" variant="light">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</Badge>;
      case "–û—Ç–º–µ–Ω–µ–Ω":
        return <Badge color="error" variant="light">–û—Ç–º–µ–Ω–µ–Ω</Badge>;
      default:
        return <Badge color="light" variant="light">{status}</Badge>;
    }
  };

  const getTypeBadge = (type: string) => {
    switch (type) {
      case "topup":
        return <Badge color="success" variant="light">–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</Badge>;
      case "payment":
        return <Badge color="primary" variant="light">–û–ø–ª–∞—Ç–∞</Badge>;
      case "refund":
        return <Badge color="warning" variant="light">–í–æ–∑–≤—Ä–∞—Ç</Badge>;
      default:
        return <Badge color="light" variant="light">{type}</Badge>;
    }
  };

  const getMethodBadge = (method: string) => {
    switch (method) {
      case "–ù–∞–ª–∏—á–Ω—ã–µ":
        return <Badge color="success" variant="light">üíµ –ù–∞–ª–∏—á–Ω—ã–µ</Badge>;
      case "–ö–∞—Ä—Ç–∞":
        return <Badge color="primary" variant="light">üí≥ –ö–∞—Ä—Ç–∞</Badge>;
      case "–ü–µ—Ä–µ–≤–æ–¥":
        return <Badge color="info" variant="light">üè¶ –ü–µ—Ä–µ–≤–æ–¥</Badge>;
      case "–¢–µ—Ä–º–∏–Ω–∞–ª":
        return <Badge color="warning" variant="light">üñ•Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª</Badge>;
      default:
        return <Badge color="light" variant="light">{method}</Badge>;
    }
  };

  const handleTopupSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:", {
      client: selectedClient,
      amount: parseFloat(amount),
      method: paymentMethod,
      description
    });
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    setSelectedClient("");
    setAmount("");
    setDescription("");
    setIsTopupModalOpen(false);
  };

  const handlePaymentSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:", {
      client: selectedClient,
      amount: parseFloat(amount),
      method: paymentMethod,
      description
    });
    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
    setSelectedClient("");
    setAmount("");
    setDescription("");
    setIsPaymentModalOpen(false);
  };

  const buildFileName = (base: string, from?: string, to?: string) => {
    const parts = [base];
    if (from) parts.push(from);
    if (to && to !== from) parts.push(to);
    return `${parts.join("-")}.csv`;
  };

  const handleExportTransactions = async ({ from, to }: ExportDateRange) => {
    try {
      await exportAdminData({
        type: "balances",
        from: from || undefined,
        to: to || undefined,
        fileName: buildFileName("client-balances", from, to),
      });
      showSuccess("–≠–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω");
    } catch (err) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∞–ª–∞–Ω—Å–∞–º", err);
      showError("–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∞–ª–∞–Ω—Å–∞–º");
    }
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  const balanceStats = [
    {
      title: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å",
      value: "15",
      amount: "67,500 ‚ÇΩ",
      color: "success"
    },
    {
      title: "–ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ –¥–µ–Ω—å",
      value: "23",
      amount: "145,600 ‚ÇΩ",
      color: "primary"
    },
    {
      title: "–í–æ–∑–≤—Ä–∞—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å",
      value: "3",
      amount: "12,300 ‚ÇΩ",
      color: "warning"
    },
    {
      title: "–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç",
      value: "41",
      amount: "200,800 ‚ÇΩ",
      color: "info"
    }
  ];

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {balanceStats.map((stat, index) => (
          <div
            key={index}
            className="bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700"
          >
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
                  {stat.title}
                </h3>
                <div className="mt-2">
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {stat.value}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                    {stat.amount}
                  </p>
                </div>
              </div>
              <div className={`p-3 rounded-lg ${
                stat.color === "success" ? "bg-green-100 dark:bg-green-900/20" :
                stat.color === "primary" ? "bg-blue-100 dark:bg-blue-900/20" :
                stat.color === "warning" ? "bg-yellow-100 dark:bg-yellow-900/20" :
                "bg-purple-100 dark:bg-purple-900/20"
              }`}>
                <div className={`w-6 h-6 ${
                  stat.color === "success" ? "text-green-600 dark:text-green-400" :
                  stat.color === "primary" ? "text-blue-600 dark:text-blue-400" :
                  stat.color === "warning" ? "text-yellow-600 dark:text-yellow-400" :
                  "text-purple-600 dark:text-purple-400"
                }`}>
                  {stat.color === "success" && "üí∞"}
                  {stat.color === "primary" && "üí≥"}
                  {stat.color === "warning" && "‚Ü©Ô∏è"}
                  {stat.color === "info" && "üìä"}
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
      <ComponentCard
        title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤"
        desc="–†—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤"
      >
        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="mb-6 flex flex-wrap gap-4">
          <Button 
            variant="primary" 
            onClick={() => setIsTopupModalOpen(true)}
          >
            üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
          </Button>
          <Button 
            variant="outline" 
            onClick={() => setIsPaymentModalOpen(true)}
          >
            üí≥ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
          </Button>
          <Button variant="outline">
            üìä –û—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
          </Button>
          <ExportWithDateRange
            triggerLabel="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
            variant="outline"
            size="sm"
            onConfirm={handleExportTransactions}
            description="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –±–∞–ª–∞–Ω—Å–∞–º –∫–ª–∏–µ–Ω—Ç–æ–≤."
          />
        </div>

        {/* –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white">
            –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
          </h3>
          
          <Table>
            <TableHeader>
              <TableRow>
                <TableCell>ID</TableCell>
                <TableCell>–ö–ª–∏–µ–Ω—Ç</TableCell>
                <TableCell>–ö–æ–Ω—Ç–∞–∫—Ç—ã</TableCell>
                <TableCell>–°—É–º–º–∞</TableCell>
                <TableCell>–¢–∏–ø</TableCell>
                <TableCell>–°–ø–æ—Å–æ–±</TableCell>
                <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                <TableCell>–û–ø–∏—Å–∞–Ω–∏–µ</TableCell>
                <TableCell>–î–∞—Ç–∞</TableCell>
                <TableCell>–û–±—Ä–∞–±–æ—Ç–∞–ª</TableCell>
                <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
              </TableRow>
            </TableHeader>
            <TableBody>
              {mockTransactions.map((transaction) => (
                <TableRow key={transaction.id}>
                  <TableCell className="font-medium">
                    #{transaction.id}
                  </TableCell>
                  <TableCell>
                    <div className="font-medium text-gray-900 dark:text-white">
                      {transaction.clientName}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="text-sm text-gray-500">
                      <div>{transaction.clientPhone}</div>
                      <div>{transaction.clientEmail}</div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <span className={`font-semibold ${
                      transaction.type === "topup" ? "text-green-600" :
                      transaction.type === "payment" ? "text-blue-600" :
                      "text-yellow-600"
                    }`}>
                      {transaction.type === "refund" ? "-" : "+"}
                      {formatCurrency(transaction.amount)}
                    </span>
                  </TableCell>
                  <TableCell>
                    {getTypeBadge(transaction.type)}
                  </TableCell>
                  <TableCell>
                    {getMethodBadge(transaction.method)}
                  </TableCell>
                  <TableCell>
                    {getStatusBadge(transaction.status)}
                  </TableCell>
                  <TableCell className="max-w-xs">
                    <span className="text-sm text-gray-600 dark:text-gray-400 truncate block">
                      {transaction.description}
                    </span>
                  </TableCell>
                  <TableCell>
                    <span className="text-sm text-gray-500">
                      {formatDateTime(transaction.createdAt)}
                    </span>
                  </TableCell>
                  <TableCell>
                    <span className="text-sm text-gray-500">
                      {transaction.processedBy}
                    </span>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      <Button variant="outline" size="sm">
                        –î–µ—Ç–∞–ª–∏
                      </Button>
                      {transaction.status === "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ" && (
                        <Button variant="primary" size="sm">
                          –û–±—Ä–∞–±–æ—Ç–∞—Ç—å
                        </Button>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </ComponentCard>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ */}
      <Modal isOpen={isTopupModalOpen} onClose={() => setIsTopupModalOpen(false)} size="md">
        <div className="p-6">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
          </h2>
          
          <Form onSubmit={handleTopupSubmit}>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ *
                </label>
                <select 
                  value={selectedClient}
                  onChange={(e) => setSelectedClient(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                  required
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</option>
                  <option value="ivanov">–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á (+7 912 345-67-89)</option>
                  <option value="sidorova">–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞ (+7 923 456-78-90)</option>
                  <option value="petrov">–ü–µ—Ç—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á (+7 934 567-89-01)</option>
                </select>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è *
                  </label>
                  <input
                    type="number"
                    min="1"
                    step="0.01"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã *
                  </label>
                  <select 
                    value={paymentMethod}
                    onChange={(e) => setPaymentMethod(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                    required
                  >
                    <option value="–ù–∞–ª–∏—á–Ω—ã–µ">üíµ –ù–∞–ª–∏—á–Ω—ã–µ</option>
                    <option value="–ö–∞—Ä—Ç–∞">üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</option>
                    <option value="–ü–µ—Ä–µ–≤–æ–¥">üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</option>
                    <option value="–¢–µ—Ä–º–∏–Ω–∞–ª">üñ•Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                </label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏"
                />
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <Button variant="outline" onClick={() => setIsTopupModalOpen(false)}>
                –û—Ç–º–µ–Ω–∏—Ç—å
              </Button>
              <Button variant="primary" type="submit">
                üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
              </Button>
            </div>
          </Form>
        </div>
      </Modal>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ */}
      <Modal isOpen={isPaymentModalOpen} onClose={() => setIsPaymentModalOpen(false)} size="md">
        <div className="p-6">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">
            üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
          </h2>
          
          <Form onSubmit={handlePaymentSubmit}>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ *
                </label>
                <select 
                  value={selectedClient}
                  onChange={(e) => setSelectedClient(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                  required
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</option>
                  <option value="ivanov">–ò–≤–∞–Ω–æ–≤ –ü–µ—Ç—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á (–ë–∞–ª–∞–Ω—Å: 15,000 ‚ÇΩ)</option>
                  <option value="sidorova">–°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞ (–ë–∞–ª–∞–Ω—Å: 8,500 ‚ÇΩ)</option>
                  <option value="petrov">–ü–µ—Ç—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á (–ë–∞–ª–∞–Ω—Å: 12,300 ‚ÇΩ)</option>
                </select>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ *
                  </label>
                  <input
                    type="number"
                    min="1"
                    step="0.01"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã *
                  </label>
                  <select 
                    value={paymentMethod}
                    onChange={(e) => setPaymentMethod(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                    required
                  >
                    <option value="–ë–∞–ª–∞–Ω—Å">üí∞ –° –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞</option>
                    <option value="–ù–∞–ª–∏—á–Ω—ã–µ">üíµ –ù–∞–ª–∏—á–Ω—ã–µ</option>
                    <option value="–ö–∞—Ä—Ç–∞">üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</option>
                    <option value="–ü–µ—Ä–µ–≤–æ–¥">üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ *
                </label>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ12345"
                  required
                />
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <Button variant="outline" onClick={() => setIsPaymentModalOpen(false)}>
                –û—Ç–º–µ–Ω–∏—Ç—å
              </Button>
              <Button variant="primary" type="submit">
                üí≥ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
              </Button>
            </div>
          </Form>
        </div>
      </Modal>
    </div>
  );
};

export default BalanceManagementPage;
