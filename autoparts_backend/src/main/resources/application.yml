server:
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
  tomcat:
    threads:
      max: 400
      min-spare: 50
    connection-timeout: 20000
    max-connections: 8192
    accept-count: 500

spring:
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration
  main:
    lazy-initialization: false  
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 12MB
  datasource:
    url: jdbc:postgresql://127.0.0.1:5432/eurolinecloud
    username: behruz
    password: 234Bex456
    hikari:
      maximum-pool-size: 60  # Увеличено с 40 до 60 для dev
      minimum-idle: 25  # Увеличено с 20 до 25
      connection-timeout: 10000  # Уменьшено с 15 до 10 сек
      idle-timeout: 300000
      max-lifetime: 540000  # 9 минут (меньше чем PostgreSQL wait_timeout)
      leak-detection-threshold: 60000
      validation-timeout: 5000
      keepalive-time: 300000  # 5 минут keepalive
  task:
    scheduling:
      enabled: true  # Включаем scheduled tasks
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        order_inserts: true
        order_updates: true
        jdbc:
          batch_size: ${CML_BATCH_SIZE:5000}
    show-sql: false
    open-in-view: false
  redis:
    host: localhost
    port: 6379
    password: ""
  # Kafka integration disabled; using RabbitMQ instead
  # kafka:
  #   bootstrap-servers: localhost:9092
  #   consumer:
  #     group-id: autoparts-consumers
  #     key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  #     value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
  #     properties:
  #       spring.json.trusted.packages: "*"
  #   producer:
  #     key-serializer: org.apache.kafka.common.serialization.StringSerializer
  #     value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  #   admin:
  #     enabled: false
  #   topics:
  #     inventory-delta: 1c.inventory.delta
  #     inventory-snapshot: 1c.inventory.snapshot
  #     inventory-query-request: 1c.inventory.query.request
  #     inventory-query-reply: 1c.inventory.query.reply
  #     order-request: 1c.order.request
  #     order-response: 1c.order.response
  #     order-created: order.created.v1
  #     stock-reserved: stock.reserved.v1
  #     stock-rejected: stock.rejected.v1
  #     group: autoparts
  liquibase:
    enabled: true  # включено для автоматического добавления пользователя admin
    change-log: classpath:db/changelog/db.changelog-master.yaml
  mvc:
    log-request-details: true    # добавлено: логировать заголовки/параметры запросов
  rabbitmq:
    host: ${RABBIT_HOST:localhost}
    port: ${RABBIT_PORT:5672}
    username: ${RABBIT_USER:cml}
    password: ${RABBIT_PASSWORD:cml}
    connection-timeout: 30000
    requested-heartbeat: 30  # Heartbeat каждые 30 секунд
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 2000
          max-attempts: 3
          max-interval: 10000
          multiplier: 2

# Kafka topic shortcuts disabled; RabbitMQ is the only broker in use
# kafka:
#   bootstrap-servers: ${spring.kafka.bootstrap-servers}
#   topics:
#     order-created: ${spring.kafka.topics.order-created}
#     stock-reserved: ${spring.kafka.topics.stock-reserved}
#     stock-rejected: ${spring.kafka.topics.stock-rejected}
#   group: ${spring.kafka.topics.group}

# topics:
#   inventory-delta: ${spring.kafka.topics.inventory-delta}
#   inventory-snapshot: ${spring.kafka.topics.inventory-snapshot}
#   inventory-query-request: ${spring.kafka.topics.inventory-query-request}
#   inventory-query-reply: ${spring.kafka.topics.inventory-query-reply}
#   order-request: ${spring.kafka.topics.order-request}
#   order-response: ${spring.kafka.topics.order-response}
#   order-created: ${spring.kafka.topics.order-created}
#   stock-reserved: ${spring.kafka.topics.stock-reserved}
#   stock-rejected: ${spring.kafka.topics.stock-rejected}

onec:
  base-url: http://onec.local


outbox:
  publisher:
    delay-ms: 5000  # Увеличен интервал для development (5 секунд)

# Конфигурация интеграции с 1С
oneC:
  api:
    url: ${ONEC_API_URL:http://localhost:8081/api/1c}
    username: ${ONEC_USERNAME:admin}
    password: ${ONEC_PASSWORD:password}
  connection:
    timeout: 10000

app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:5173,https://admin.euroline.1edu.kz,https://euroline.1edu.kz}

# UMAPI.ru Integration
umapi:
  base-url: https://api.umapi.ru
  locale: ru-RU
  api-key: your-production-api-key-here
  timeout:
    connect: 5000
    read: 10000
  retry:
    max-attempts: 3
    backoff-delay: 1000


security:
  jwt:
    secret: ${JWT_SECRET:this-is-a-very-long-and-secure-jwt-secret-key-for-production-use-change-this-in-production-environment}
    expiration-ms: ${JWT_EXPIRATION_MS:86400000}

integration:
  kafka:
    enabled: false
  push:
    enabled: false

aws:
  s3:
    endpoint: ${S3_ENDPOINT:https://api.euroline.storage.1edu.kz}
    region: ${S3_REGION:us-east-1}
    access-key: ${S3_ACCESS_KEY:admin}
    secret-key: ${S3_SECRET_KEY:admin12345}
    bucket: ${S3_BUCKET:commerce-ml}

cml:
  username: ${CML_USERNAME:1c_exchange}
  password: ${CML_PASSWORD:changeit}
  allowed-ips: []  # Пустой массив = разрешены все IP
  queue:
    exchange: cml.exchange
    catalog-routing-key: catalog.import
    offers-routing-key: offers.import
    orders-export-routing-key: orders.export
    orders-apply-routing-key: orders.apply
    orders-integration-routing-key: orders.integration
    returns-integration-routing-key: returns.integration
  max-file-size-mb: ${CML_MAX_FILE_SIZE_MB:50}
  max-unzipped-size-mb: ${CML_MAX_UNZIPPED_SIZE_MB:500}
  batch-size: ${CML_BATCH_SIZE:5000}
  orders-export-interval-ms: ${CML_ORDERS_EXPORT_INTERVAL_MS:300000}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true

laximo:
  cat:
    soap-url: "https://ws.laximo.ru/ec.Kito.WebCatalog/services/Catalog.CatalogHttpSoap12Endpoint/"
    login: "am657904"
    password: "9z3n_AyzyZ24RAI"
    locale: "ru_RU"

  telegram:
    bot:
      token: ${TELEGRAM_BOT_TOKEN:8250208628:AAEvjencS7ffYxD-KmSIFFqORCLWU0BHI4A}
      username: ${TELEGRAM_BOT_USERNAME:euroline_autoparts_bot}
      admin-chat-id: ${TELEGRAM_ADMIN_CHAT_ID:6322824405}

logging:
  level:
    autoparts.kz.modules.cml: INFO
    org.springframework.amqp: WARN
    org.springframework.amqp.rabbit: WARN

# Настройки для production (закомментированы)
# spring:
#   jpa:
#     show-sql: false  # Отключить на продакшене
#     properties:
#       hibernate:
#         format_sql: false
#         jdbc.batch_size: 50
#         order_inserts: true
#         order_updates: true
#         jdbc.batch_versioned_data: true
