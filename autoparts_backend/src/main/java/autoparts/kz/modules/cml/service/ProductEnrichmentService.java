package autoparts.kz.modules.cml.service;

import autoparts.kz.modules.cml.domain.entity.CmlPrice;
import autoparts.kz.modules.cml.domain.entity.CmlStock;
import autoparts.kz.modules.cml.dto.WarehouseStockDTO;
import autoparts.kz.modules.cml.repo.CmlPriceRepository;
import autoparts.kz.modules.cml.repo.CmlStockRepository;
import autoparts.kz.modules.manualProducts.entity.Product;
import autoparts.kz.modules.manualProducts.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ 1–°.
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
 * 1. –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–π –ë–î –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º 1–°
 * 2. –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ cml_prices
 * 3. –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ cml_stocks
 * 4. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å–∫–ª–∞–¥–∞–º
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ProductEnrichmentService {

    private final ProductRepository productRepository;
    private final CmlStockRepository cmlStockRepository;
    private final CmlPriceRepository cmlPriceRepository;

    /**
     * –û–±–æ–≥–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —Ü–µ–Ω–æ–π –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏–∑ 1–° –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.
     *
     * @param articleNumber –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (OEM –∫–æ–¥)
     * @return –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –∏ –æ—Å—Ç–∞—Ç–∫–∞—Ö, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω
     */
    @Transactional(readOnly = true)
    public Optional<EnrichmentData> enrichByArticle(String articleNumber) {
        if (articleNumber == null || articleNumber.trim().isEmpty()) {
            return Optional.empty();
        }

        return productRepository.findByArticle(articleNumber.trim())
                .flatMap(this::enrichProduct);
    }

    /**
     * –û–±–æ–≥–∞—Ç–∏—Ç—å –µ–¥–∏–Ω–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä.
     *
     * @param product —Å—É—â–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
     * @return –¥–∞–Ω–Ω—ã–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
     */
    @Transactional(readOnly = true)
    public Optional<EnrichmentData> enrichProduct(Product product) {
        if (product == null) {
            return Optional.empty();
        }
        Map<Long, EnrichmentData> enriched = enrichProducts(List.of(product));
        return Optional.ofNullable(enriched.get(product.getId()));
    }

    /**
     * üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.
     * –î–µ–ª–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ –ø–æ –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü—ã cml_prices –∏ cml_stocks –≤–º–µ—Å—Ç–æ N√ó3.
     *
     * @param products —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
     * @return –º–∞–ø–∞: ID —Ç–æ–≤–∞—Ä–∞ ‚Üí –¥–∞–Ω–Ω—ã–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
     */
    @Transactional(readOnly = true)
    public Map<Long, EnrichmentData> enrichProducts(List<Product> products) {
        if (products == null || products.isEmpty()) {
            return Map.of();
        }

        List<String> externalCodes = products.stream()
                .map(Product::getExternalCode)
                .filter(code -> code != null && !code.trim().isEmpty())
                .map(String::trim)
                .distinct()
                .toList();

        Map<String, List<WarehouseStockDTO>> stocksByGuid = externalCodes.isEmpty()
                ? Map.of()
                : loadStocksByGuid(externalCodes);

        Map<String, BigDecimal> pricesByGuid = externalCodes.isEmpty()
                ? Map.of()
                : loadPricesByGuid(externalCodes);

        Map<Long, EnrichmentData> result = new HashMap<>(products.size());

        for (Product product : products) {
            EnrichmentData data = new EnrichmentData();
            data.setProductId(product.getId());
            data.setExternalCode(product.getExternalCode());

            // –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
            Integer price = product.getPrice();
            Integer stock = product.getStock();

            List<WarehouseStockDTO> warehouses = stocksByGuid.getOrDefault(
                    product.getExternalCode(),
                    List.of()
            );

            if (price == null) {
                price = toInteger(pricesByGuid.get(product.getExternalCode()));
            }

            if ((stock == null || stock == 0) && !warehouses.isEmpty()) {
                stock = sumQuantities(warehouses);
            }

            data.setPrice(price);
            data.setStock(stock);
            data.setWarehouses(warehouses.isEmpty() ? List.of() : List.copyOf(warehouses));

            boolean hasExternalData = pricesByGuid.containsKey(product.getExternalCode())
                    || !warehouses.isEmpty();
            data.setFoundInLocalDb(hasExternalData);

            log.debug("Enriched product {} (externalCode={}): price={}, stock={}, warehouses={}",
                    product.getId(),
                    product.getExternalCode(),
                    data.getPrice(),
                    data.getStock(),
                    warehouses.size());

            result.put(product.getId(), data);
        }

        return result;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º.
     *
     * @param productGuid GUID —Ç–æ–≤–∞—Ä–∞ –≤ 1–° (external_code)
     * @return —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
     */
    @Transactional(readOnly = true)
    public List<WarehouseStockDTO> getWarehouseStocks(String productGuid) {
        if (productGuid == null || productGuid.trim().isEmpty()) {
            return List.of();
        }

        return cmlStockRepository.findAllByProductGuid(productGuid).stream()
                .map(stock -> new WarehouseStockDTO(stock.getWarehouseGuid(), stock.getQuantity()))
                .collect(Collectors.toList());
    }

    private Map<String, List<WarehouseStockDTO>> loadStocksByGuid(List<String> externalCodes) {
        Map<String, List<WarehouseStockDTO>> grouped = cmlStockRepository.findAllByProductGuidIn(externalCodes).stream()
                .collect(Collectors.groupingBy(
                        CmlStock::getProductGuid,
                        Collectors.mapping(
                                stock -> new WarehouseStockDTO(stock.getWarehouseGuid(), stock.getQuantity()),
                                Collectors.toList()
                        )
                ));

        grouped.replaceAll((guid, warehouses) -> warehouses == null ? List.of() : List.copyOf(warehouses));
        return grouped;
    }

    private Map<String, BigDecimal> loadPricesByGuid(List<String> externalCodes) {
        return cmlPriceRepository.findAllByProductGuidIn(externalCodes).stream()
                .collect(Collectors.toMap(
                        CmlPrice::getProductGuid,
                        CmlPrice::getValue,
                        BigDecimal::min
                ));
    }

    private Integer sumQuantities(List<WarehouseStockDTO> warehouses) {
        if (warehouses == null || warehouses.isEmpty()) {
            return null;
        }

        BigDecimal total = warehouses.stream()
                .map(WarehouseStockDTO::getQuantity)
                .filter(Objects::nonNull)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        return toInteger(total);
    }

    private Integer toInteger(BigDecimal value) {
        if (value == null) {
            return null;
        }
        BigDecimal scaled = value.setScale(0, RoundingMode.HALF_UP);

        if (scaled.compareTo(BigDecimal.valueOf(Integer.MAX_VALUE)) > 0) {
            return Integer.MAX_VALUE;
        }
        if (scaled.compareTo(BigDecimal.valueOf(Integer.MIN_VALUE)) < 0) {
            return Integer.MIN_VALUE;
        }
        return scaled.intValue();
    }

    /**
     * DTO –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     */
    @lombok.Data
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class EnrichmentData {
        /**
         * ID —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞—à–µ–π –ë–î.
         */
        private Long productId;

        /**
         * –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ 1–°.
         */
        private Integer price;

        /**
         * –°—É–º–º–∞—Ä–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Å–æ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤.
         */
        private Integer stock;

        /**
         * GUID —Ç–æ–≤–∞—Ä–∞ –≤ 1–° –¥–ª—è —Å–≤—è–∑–∏.
         */
        private String externalCode;

        /**
         * –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º.
         */
        private List<WarehouseStockDTO> warehouses;

        /**
         * –§–ª–∞–≥: –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ cml_* —Ç–∞–±–ª–∏—Ü–∞—Ö.
         */
        private boolean foundInLocalDb;
    }
}
