package autoparts.kz.modules.cml.service;

import autoparts.kz.modules.cml.domain.entity.CmlStock;
import autoparts.kz.modules.cml.dto.WarehouseStockDTO;
import autoparts.kz.modules.cml.repo.CmlStockRepository;
import autoparts.kz.modules.manualProducts.entity.Product;
import autoparts.kz.modules.manualProducts.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ 1–°
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
 * 1. –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–π –ë–î –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É/–∫–æ–¥—É
 * 2. –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ products (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ 1–°)
 * 3. –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ products
 * 4. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å–∫–ª–∞–¥–∞–º –∏–∑ cml_stocks
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ProductEnrichmentService {

    private final ProductRepository productRepository;
    private final CmlStockRepository cmlStockRepository;

    /**
     * –û–±–æ–≥–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —Ü–µ–Ω–æ–π –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏–∑ 1–°
     * 
     * @param articleNumber –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (OEM –∫–æ–¥)
     * @return –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ –∏ –æ—Å—Ç–∞—Ç–∫–∞—Ö, –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –ë–î
     */
    @Transactional(readOnly = true)
    public Optional<EnrichmentData> enrichByArticle(String articleNumber) {
        if (articleNumber == null || articleNumber.trim().isEmpty()) {
            return Optional.empty();
        }

        // –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–π –ë–î –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        Optional<Product> productOpt = productRepository.findByArticle(articleNumber.trim());
        
        if (productOpt.isEmpty()) {
            log.debug("Product not found in local DB for article: {}", articleNumber);
            return Optional.empty();
        }

        Product product = productOpt.get();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å–∫–ª–∞–¥–∞–º
        List<WarehouseStockDTO> warehouses = getWarehouseStocks(product.getExternalCode());
        
        EnrichmentData data = new EnrichmentData();
        data.setProductId(product.getId());
        data.setPrice(product.getPrice());
        data.setStock(product.getStock());
        data.setExternalCode(product.getExternalCode());
        data.setWarehouses(warehouses);
        data.setFoundInLocalDb(true);
        
        log.debug("Enriched product data for article {}: price={}, stock={}, warehouses={}", 
                  articleNumber, data.getPrice(), data.getStock(), warehouses.size());
        
        return Optional.of(data);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º
     * 
     * @param productGuid GUID —Ç–æ–≤–∞—Ä–∞ –≤ 1–° (external_code)
     * @return —Å–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
     */
    @Transactional(readOnly = true)
    public List<WarehouseStockDTO> getWarehouseStocks(String productGuid) {
        if (productGuid == null || productGuid.trim().isEmpty()) {
            return List.of();
        }

        List<CmlStock> stocks = cmlStockRepository.findAllByProductGuid(productGuid);
        
        return stocks.stream()
                .map(stock -> new WarehouseStockDTO(
                        stock.getWarehouseGuid(),
                        stock.getQuantity()
                ))
                .collect(Collectors.toList());
    }

    /**
     * üöÄ OPTIMIZED: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
     * –í–º–µ—Å—Ç–æ N√ó3 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–µ–ª–∞–µ—Ç –≤—Å–µ–≥–æ 2 –∑–∞–ø—Ä–æ—Å–∞ (products + stocks)
     * 
     * @param articleNumbers —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
     * @return –º–∞–ø–∞: –∞—Ä—Ç–∏–∫—É–ª ‚Üí –¥–∞–Ω–Ω—ã–µ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
     */
    @Transactional(readOnly = true)
    public java.util.Map<String, EnrichmentData> enrichBatch(List<String> articleNumbers) {
        if (articleNumbers == null || articleNumbers.isEmpty()) {
            return java.util.Map.of();
        }

        // –®–∞–≥ 1: –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã (lowercase, trim, distinct)
        List<String> normalizedArticles = articleNumbers.stream()
                .filter(article -> article != null && !article.trim().isEmpty())
                .map(String::trim)
                .map(String::toLowerCase)
                .distinct()
                .toList();
        
        if (normalizedArticles.isEmpty()) {
            return java.util.Map.of();
        }

        log.debug("üöÄ Batch enriching {} articles with 2 queries instead of {}√ó3", 
                  normalizedArticles.size(), normalizedArticles.size());

        // –®–∞–≥ 2: ‚ö° –û–î–ò–ù –ó–ê–ü–†–û–° –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–≤–º–µ—Å—Ç–æ N –∑–∞–ø—Ä–æ—Å–æ–≤)
        List<Product> products = productRepository.findAllByArticleIn(normalizedArticles);
        
        if (products.isEmpty()) {
            log.debug("No products found in local DB for {} articles", normalizedArticles.size());
            return java.util.Map.of();
        }

        // –®–∞–≥ 3: ‚ö° –û–î–ò–ù –ó–ê–ü–†–û–° –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º (–≤–º–µ—Å—Ç–æ N –∑–∞–ø—Ä–æ—Å–æ–≤)
        List<String> productGuids = products.stream()
                .map(Product::getExternalCode)
                .filter(guid -> guid != null && !guid.trim().isEmpty())
                .distinct()
                .toList();
        
        List<CmlStock> allStocks = productGuids.isEmpty() 
                ? List.of() 
                : cmlStockRepository.findAllByProductGuidIn(productGuids);

        // –®–∞–≥ 4: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ GUID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        java.util.Map<String, List<WarehouseStockDTO>> stocksByGuid = allStocks.stream()
                .collect(Collectors.groupingBy(
                        CmlStock::getProductGuid,
                        Collectors.mapping(
                                stock -> new WarehouseStockDTO(stock.getWarehouseGuid(), stock.getQuantity()),
                                Collectors.toList()
                        )
                ));

        // –®–∞–≥ 5: –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞–ø—É: –∞—Ä—Ç–∏–∫—É–ª ‚Üí EnrichmentData
        java.util.Map<String, EnrichmentData> result = new java.util.HashMap<>();
        
        for (Product product : products) {
            EnrichmentData data = new EnrichmentData();
            data.setProductId(product.getId());
            data.setPrice(product.getPrice());
            data.setStock(product.getStock());
            data.setExternalCode(product.getExternalCode());
            data.setFoundInLocalDb(true);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            List<WarehouseStockDTO> warehouses = stocksByGuid.getOrDefault(
                    product.getExternalCode(), 
                    List.of()
            );
            data.setWarehouses(warehouses);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ –∫–∞–∫ –∫–ª—é—á (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
            String articleKey = product.getCode() != null 
                    ? product.getCode().toLowerCase().trim() 
                    : product.getSku().toLowerCase().trim();
            
            result.put(articleKey, data);
        }

        log.debug("‚úÖ Batch enrichment completed: found {}/{} products in 2 queries", 
                  result.size(), normalizedArticles.size());

        return result;
    }

    /**
     * DTO –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    @lombok.Data
    @lombok.NoArgsConstructor
    @lombok.AllArgsConstructor
    public static class EnrichmentData {
        /**
         * ID —Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞—à–µ–π –ë–î
         */
        private Long productId;
        
        /**
         * –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑ 1–°
         */
        private Integer price;
        
        /**
         * –°—É–º–º–∞—Ä–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ —Å–æ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–æ–≤
         */
        private Integer stock;
        
        /**
         * GUID —Ç–æ–≤–∞—Ä–∞ –≤ 1–° –¥–ª—è —Å–≤—è–∑–∏
         */
        private String externalCode;
        
        /**
         * –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–∫–ª–∞–¥–∞–º
         */
        private List<WarehouseStockDTO> warehouses;
        
        /**
         * –§–ª–∞–≥: –Ω–∞–π–¥–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–π –ë–î
         */
        private boolean foundInLocalDb;
    }
}
