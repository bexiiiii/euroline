package autoparts.kz.modules.cml.service;

import autoparts.kz.modules.cml.builder.OrdersCmlBuilder;
import autoparts.kz.modules.cml.domain.entity.CmlOrder;
import autoparts.kz.modules.cml.domain.entity.CmlOrderStatus;
import autoparts.kz.modules.cml.repo.CmlOrderRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.xml.stream.XMLStreamException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Arrays;
import java.util.List;

/**
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ 1–° —á–µ—Ä–µ–∑ CommerceML XML.
 * 
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ NEW –∑–∞–∫–∞–∑—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç XML –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ MinIO.
 * –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∫–∞–∫ CONFIRMED.
 * –ó–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–µ CONFIRMED –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ - —ç—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã.
 */
@Service
public class OrdersExportService {

    private static final Logger log = LoggerFactory.getLogger(OrdersExportService.class);

    private final CmlOrderRepository orderRepository;
    private final OrdersCmlBuilder builder;
    private final S3Storage storage;

    public OrdersExportService(CmlOrderRepository orderRepository,
                               OrdersCmlBuilder builder,
                               S3Storage storage) {
        this.orderRepository = orderRepository;
        this.builder = builder;
        this.storage = storage;
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CommerceML XML.
     * 
     * @param requestId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * @return –ø—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É XML —Ñ–∞–π–ª—É –≤ MinIO
     */
    @Transactional
    public String exportOrders(String requestId) {
        try {
            // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ NEW –∑–∞–∫–∞–∑—ã
            // –ü–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç CONFIRMED, –∏ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
            List<CmlOrder> newOrders = orderRepository.findByStatusIn(
                Arrays.asList(CmlOrderStatus.NEW)
            );
            
            if (newOrders.isEmpty()) {
                log.info("üì≠ No NEW orders to export (requestId: {})", requestId);
                return null; // –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            }
            
            log.info("üì¶ Found {} NEW orders to export (requestId: {})", newOrders.size(), requestId);
            
            log.info("Found {} new orders to export (requestId: {})", newOrders.size(), requestId);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML
            byte[] xml = builder.build(newOrders);
            log.debug("XML built successfully, size: {} bytes", xml.length);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MinIO —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–∞–ø–æ–∫
            LocalDate today = LocalDate.now(ZoneId.of("Asia/Almaty"));
            String key = "commerce-ml/outbox/orders/%d/%02d/%02d/orders_%s.xml".formatted(
                    today.getYear(),
                    today.getMonthValue(),
                    today.getDayOfMonth(),
                    requestId);
            
            storage.putObject(key, xml, "application/xml");
            log.info("‚úÖ Exported {} orders to MinIO: {}", newOrders.size(), key);
            
            // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ 1–°
            markOrdersAsExported(newOrders);
            
            return key;
            
        } catch (XMLStreamException e) {
            log.error("‚ùå XML generation failed for requestId {}: {}", requestId, e.getMessage(), e);
            throw new IllegalStateException("Unable to build orders XML", e);
        } catch (Exception e) {
            log.error("‚ùå Orders export failed for requestId {}: {}", requestId, e.getMessage(), e);
            throw new RuntimeException("Unable to export orders", e);
        }
    }
    
    /**
     * –ü–æ–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∫–∞–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ç—É—Å CONFIRMED).
     * –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –∑–∞–∫–∞–∑–æ–≤.
     */
    private void markOrdersAsExported(List<CmlOrder> orders) {
        for (CmlOrder order : orders) {
            order.setStatus(CmlOrderStatus.CONFIRMED);
        }
        orderRepository.saveAll(orders);
        log.info("Marked {} orders as CONFIRMED (exported to 1C)", orders.size());
    }
}
