package autoparts.kz.modules.telegram.service;

import autoparts.kz.modules.order.entity.Order;
import autoparts.kz.modules.returns.entity.ReturnRequest;
import autoparts.kz.modules.finance.entity.TopUp;
import autoparts.kz.modules.auth.entity.User;
import autoparts.kz.modules.auth.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramNotificationService {

    private final TelegramBot telegramBot;
    private final UserRepository userRepository;
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
     */
    public void notifyNewOrder(Order order) {
        try {
            StringBuilder message = new StringBuilder();
            message.append("üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n");
            message.append("üìù –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: `").append(order.getPublicCode()).append("`\n");
            message.append("üí∞ –°—É–º–º–∞: *").append(formatMoney(order.getTotalPrice())).append("*\n");
            message.append("üìß Email: ").append(order.getCustomerEmail()).append("\n");
            message.append("üìç –ê–¥—Ä–µ—Å: ").append(order.getDeliveryAddress() != null ? order.getDeliveryAddress() : "–Ω–µ —É–∫–∞–∑–∞–Ω").append("\n");
            message.append("üì¶ –°—Ç–∞—Ç—É—Å: ").append(getStatusEmoji(order.getStatus().toString())).append(" ").append(order.getStatus()).append("\n");
            message.append("üïê –î–∞—Ç–∞: ").append(order.getCreatedAt().format(DATE_FORMATTER)).append("\n\n");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
            message.append("*–¢–æ–≤–∞—Ä—ã:*\n");
            order.getItems().forEach(item -> {
                message.append("‚Ä¢ ").append(item.getProduct().getName())
                       .append(" x").append(item.getQuantity())
                       .append(" - ").append(formatMoney(item.getPrice()))
                       .append("\n");
            });

            telegramBot.sendMessageToAdmin(message.toString());
            log.info("Notification sent for new order: {}", order.getPublicCode());
        } catch (Exception e) {
            log.error("Failed to send order notification: {}", e.getMessage(), e);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
     */
    public void notifyReturnRequest(ReturnRequest returnRequest) {
        try {
            StringBuilder message = new StringBuilder();
            message.append("üîÑ *–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç!*\n\n");
            message.append("üìù ID –≤–æ–∑–≤—Ä–∞—Ç–∞: `").append(returnRequest.getId()).append("`\n");
            message.append("üõí ID –∑–∞–∫–∞–∑–∞: `").append(returnRequest.getOrderId()).append("`\n");
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
            String clientName = getClientName(returnRequest.getCustomerId());
            message.append("üë§ –ö–ª–∏–µ–Ω—Ç: *").append(clientName).append("*\n");
            
            message.append("üí∞ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: *").append(formatMoney(returnRequest.getAmount())).append("*\n");
            message.append("‚ùì –ü—Ä–∏—á–∏–Ω–∞: ").append(returnRequest.getReason()).append("\n");
            message.append("üì¶ –°—Ç–∞—Ç—É—Å: ").append(getReturnStatusEmoji(returnRequest.getStatus().toString())).append(" ").append(returnRequest.getStatus()).append("\n");
            
            LocalDateTime createdAt = LocalDateTime.ofInstant(returnRequest.getCreatedAt(), ZoneId.systemDefault());
            message.append("üïê –î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: ").append(createdAt.format(DATE_FORMATTER)).append("\n");

            telegramBot.sendMessageToAdmin(message.toString());
            log.info("Notification sent for return request: {}", returnRequest.getId());
        } catch (Exception e) {
            log.error("Failed to send return request notification: {}", e.getMessage(), e);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞
     */
    public void notifyBalanceTopUp(TopUp topUp) {
        try {
            StringBuilder message = new StringBuilder();
            message.append("üí≥ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞!*\n\n");
            message.append("üìù ID –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: `").append(topUp.getId()).append("`\n");
            message.append("üí∞ –°—É–º–º–∞: *").append(formatMoney(topUp.getAmount())).append("*\n");
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
            String clientName = getClientName(topUp.getClientId());
            message.append("üë§ –ö–ª–∏–µ–Ω—Ç: *").append(clientName).append("*\n");
            
            message.append("üìä –°—Ç–∞—Ç—É—Å: ").append(getTopUpStatusEmoji(topUp.getStatus().toString())).append(" ").append(topUp.getStatus()).append("\n");
            
            if (topUp.getPaymentMethod() != null) {
                message.append("üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ").append(topUp.getPaymentMethod()).append("\n");
            }
            
            if (topUp.getAdminComment() != null) {
                message.append("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ").append(topUp.getAdminComment()).append("\n");
            }
            
            LocalDateTime createdAt = LocalDateTime.ofInstant(topUp.getCreatedAt(), ZoneId.systemDefault());
            message.append("üïê –î–∞—Ç–∞: ").append(createdAt.format(DATE_FORMATTER)).append("\n");

            if (topUp.getReceiptUrl() != null) {
                message.append("\nüìÑ –ß–µ–∫: ").append(topUp.getReceiptUrl());
            }

            telegramBot.sendMessageToAdmin(message.toString());
            log.info("Notification sent for balance top-up: {}", topUp.getId());
        } catch (Exception e) {
            log.error("Failed to send balance top-up notification: {}", e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–∫–æ–º–ø–∞–Ω–∏–∏) –∏–ª–∏ fallback
     */
    private String getClientName(Long clientId) {
        if (clientId == null) {
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç";
        }
        
        try {
            User user = userRepository.findById(clientId).orElse(null);
            if (user == null) {
                return "–ö–ª–∏–µ–Ω—Ç #" + clientId;
            }
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: clientName (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏), –∑–∞—Ç–µ–º –§–ò–û, –∑–∞—Ç–µ–º email
            if (user.getClientName() != null && !user.getClientName().isBlank()) {
                return user.getClientName();
            }
            
            // –°–æ–±–∏—Ä–∞–µ–º –§–ò–û
            StringBuilder name = new StringBuilder();
            if (user.getSurname() != null && !user.getSurname().isBlank()) {
                name.append(user.getSurname());
            }
            if (user.getName() != null && !user.getName().isBlank()) {
                if (name.length() > 0) name.append(" ");
                name.append(user.getName());
            }
            if (user.getFathername() != null && !user.getFathername().isBlank()) {
                if (name.length() > 0) name.append(" ");
                name.append(user.getFathername());
            }
            
            if (name.length() > 0) {
                return name.toString();
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            if (user.getEmail() != null && !user.getEmail().isBlank()) {
                return user.getEmail();
            }
            
            return "–ö–ª–∏–µ–Ω—Ç #" + clientId;
        } catch (Exception e) {
            log.error("Error fetching client name for ID {}: {}", clientId, e.getMessage());
            return "–ö–ª–∏–µ–Ω—Ç #" + clientId;
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã
     */
    private String formatMoney(BigDecimal amount) {
        if (amount == null) return "0 ‚Ç∏";
        return String.format("%,.2f ‚Ç∏", amount);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
     */
    private String getStatusEmoji(String status) {
        return switch (status.toUpperCase()) {
            case "PENDING" -> "‚è≥";
            case "CONFIRMED" -> "‚úÖ";
            case "PROCESSING" -> "üîÑ";
            case "SHIPPED" -> "üöö";
            case "DELIVERED" -> "üì¶";
            case "CANCELLED", "CANCELED" -> "‚ùå";
            case "COMPLETED" -> "‚úÖ";
            default -> "üìã";
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
     */
    private String getReturnStatusEmoji(String status) {
        return switch (status.toUpperCase()) {
            case "PENDING" -> "‚è≥";
            case "APPROVED" -> "‚úÖ";
            case "REJECTED" -> "‚ùå";
            case "COMPLETED" -> "‚úÖ";
            case "REFUNDED" -> "üí∞";
            default -> "üìã";
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private String getTopUpStatusEmoji(String status) {
        return switch (status.toUpperCase()) {
            case "PENDING" -> "‚è≥";
            case "APPROVED" -> "‚úÖ";
            case "REJECTED" -> "‚ùå";
            default -> "üìã";
        };
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
     */
    public void notifyAdmin(String title, String message) {
        try {
            String formattedMessage = String.format("*%s*\n\n%s", title, message);
            telegramBot.sendMessageToAdmin(formattedMessage);
            log.info("Custom notification sent: {}", title);
        } catch (Exception e) {
            log.error("Failed to send custom notification: {}", e.getMessage(), e);
        }
    }
}
