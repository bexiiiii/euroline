package autoparts.kz.common.filter;

import autoparts.kz.common.config.RateLimitConfig;
import io.github.bucket4j.Bucket;
import io.github.bucket4j.BucketConfiguration;
import io.github.bucket4j.ConsumptionProbe;
import io.github.bucket4j.redis.lettuce.cas.LettuceBasedProxyManager;
import io.lettuce.core.RedisClient;
import io.lettuce.core.RedisURI;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.codec.ByteArrayCodec;
import io.lettuce.core.codec.RedisCodec;
import io.lettuce.core.codec.StringCodec;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.Duration;

/**
 * üöÄ Rate Limiting Filter –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS-–∞—Ç–∞–∫ –∏ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è API.
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º Token Bucket –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤:
 * - –û–±—â–∏–π –ª–∏–º–∏—Ç: 1000 req/min –¥–ª—è –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
 * - –ü–æ–∏—Å–∫: 100 req/min –¥–ª—è /api/products/search
 * - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: 10 req/min –¥–ª—è /api/auth/login
 * - –ó–∞–∫–∞–∑—ã: 20 req/hour –¥–ª—è /api/orders
 * 
 * –ö–æ–≥–¥–∞ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 429 Too Many Requests —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏:
 * - X-Rate-Limit-Retry-After-Seconds: —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
 * - X-Rate-Limit-Remaining: —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å
 */
@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
@Slf4j
public class RateLimitingFilter extends OncePerRequestFilter {

    private final LettuceBasedProxyManager<String> proxyManager;

    public RateLimitingFilter(
            @Value("${spring.data.redis.host:localhost}") String redisHost,
            @Value("${spring.data.redis.port:6379}") int redisPort,
            @Value("${spring.data.redis.password:}") String redisPassword
    ) {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ rate limiting
        RedisURI.Builder uriBuilder = RedisURI.builder()
                .withHost(redisHost)
                .withPort(redisPort);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if (redisPassword != null && !redisPassword.isEmpty()) {
            uriBuilder.withPassword(redisPassword.toCharArray());
        }
        
        RedisClient redisClient = RedisClient.create(uriBuilder.build());
        
        StatefulRedisConnection<String, byte[]> connection = redisClient.connect(
                RedisCodec.of(StringCodec.UTF8, ByteArrayCodec.INSTANCE)
        );

        this.proxyManager = LettuceBasedProxyManager.builderFor(connection)
                .build();
    }

    @Override
    protected void doFilterInternal(
            HttpServletRequest request,
            HttpServletResponse response,
            FilterChain filterChain
    ) throws ServletException, IOException {
        
        String requestURI = request.getRequestURI();
        String clientIp = getClientIP(request);
        
        // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é bucket –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        BucketConfiguration bucketConfig;
        String bucketKey;
        
        if (requestURI.contains("/api/products/search")) {
            // –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: 100 req/min
            bucketConfig = RateLimitConfig.searchBucketConfiguration();
            bucketKey = "rate_limit:search:" + clientIp;
            log.debug("üîç Rate limiting search request from IP: {}", clientIp);
        } else if (requestURI.contains("/api/auth/login")) {
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: 10 req/min
            bucketConfig = RateLimitConfig.authBucketConfiguration();
            bucketKey = "rate_limit:auth:" + clientIp;
            log.debug("üîê Rate limiting auth request from IP: {}", clientIp);
        } else if (requestURI.contains("/api/orders") && "POST".equals(request.getMethod())) {
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤: 20 req/hour
            bucketConfig = RateLimitConfig.orderBucketConfiguration();
            bucketKey = "rate_limit:orders:" + clientIp;
            log.debug("üõí Rate limiting order creation from IP: {}", clientIp);
        } else {
            // –û–±—â–∏–π –ª–∏–º–∏—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: 1000 req/min
            bucketConfig = RateLimitConfig.defaultBucketConfiguration();
            bucketKey = "rate_limit:default:" + clientIp;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º bucket –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ IP
        Bucket bucket = proxyManager.builder()
                .build(bucketKey, () -> bucketConfig);
        
        // –ü—ã—Ç–∞–µ–º—Å—è "—Å—ä–µ—Å—Ç—å" 1 —Ç–æ–∫–µ–Ω
        ConsumptionProbe probe = bucket.tryConsumeAndReturnRemaining(1);
        
        if (probe.isConsumed()) {
            // ‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ rate limiting
            response.setHeader("X-Rate-Limit-Remaining", String.valueOf(probe.getRemainingTokens()));
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
            filterChain.doFilter(request, response);
        } else {
            // ‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 429 Too Many Requests
            
            long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;
            
            log.warn("‚õî Rate limit exceeded for IP: {} on endpoint: {}. Retry after {} seconds", 
                    clientIp, requestURI, waitForRefill);
            
            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());
            response.setHeader("X-Rate-Limit-Retry-After-Seconds", String.valueOf(waitForRefill));
            response.setHeader("X-Rate-Limit-Remaining", "0");
            response.setContentType("application/json");
            response.setCharacterEncoding("UTF-8");
            
            String errorMessage = String.format(
                    "{\"error\":\"Rate limit exceeded\",\"message\":\"Too many requests. Please retry after %d seconds.\",\"retryAfter\":%d}",
                    waitForRefill, waitForRefill
            );
            
            response.getWriter().write(errorMessage);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–∫—Å–∏ –∏ load balancer.
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ X-Forwarded-For –∏ X-Real-IP.
     */
    private String getClientIP(HttpServletRequest request) {
        String xfHeader = request.getHeader("X-Forwarded-For");
        if (xfHeader != null && !xfHeader.isEmpty()) {
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π IP –∏–∑ —Å–ø–∏—Å–∫–∞ (—Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)
            return xfHeader.split(",")[0].trim();
        }
        
        String xRealIp = request.getHeader("X-Real-IP");
        if (xRealIp != null && !xRealIp.isEmpty()) {
            return xRealIp;
        }
        
        // Fallback: –±–µ—Ä–µ–º IP –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        return request.getRemoteAddr();
    }
}
