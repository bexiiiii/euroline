"use client";

import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';

/**
 *  –í–ê–ñ–ù–û –î–õ–Ø LAXIMO SSD:
 * 
 * SSD - —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π:
 * 1. –ü–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç Laximo –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (VIN/FRAME/Wizard)
 * 2. –î–û–õ–ñ–ï–ù –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤–æ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
 * 3. –ñ–∏–≤—ë—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π "—Å–µ—Å—Å–∏–∏ –≤—ã–±–æ—Ä–∞"
 * 4. –ü—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è - –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–æ–≤—ã–º SSD
 */

export interface VehicleSession {
  vehicleId: string;
  ssd: string;
  catalog: string;
  brand?: string;
  name?: string;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
  attributes?: Array<{
    name: string;
    value: string;
    unit?: string;
  }>;
}

interface VehicleContextType {
  // –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  session: VehicleSession | null;
  
  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–∏–∑ VIN –ø–æ–∏—Å–∫–∞ / Wizard)
  setSession: (session: VehicleSession) => void;
  
  // –û–±–Ω–æ–≤–∏—Ç—å SSD (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
  updateSsd: (newSsd: string) => void;
  
  // –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
  clearSession: () => void;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  hasActiveSession: () => boolean;
  
  // –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (vehicleId, ssd, catalog)
  getRequestParams: () => { vehicleId: string; ssd: string; catalog: string } | null;
}

const VehicleContext = createContext<VehicleContextType | undefined>(undefined);

export interface VehicleProviderProps {
  children: ReactNode;
}

export function VehicleProvider({ children }: VehicleProviderProps) {
  const [session, setSessionState] = useState<VehicleSession | null>(null);

  const setSession = useCallback((newSession: VehicleSession) => {
    console.log('üöó Setting new vehicle session:', {
      vehicleId: newSession.vehicleId,
      ssd: newSession.ssd?.substring(0, 8) + '...', // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ SSD –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      catalog: newSession.catalog,
      brand: newSession.brand,
      name: newSession.name
    });
    setSessionState(newSession);
  }, []);

  const updateSsd = useCallback((newSsd: string) => {
    if (!session) {
      console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å SSD –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏');
      return;
    }
    
    console.log('üîÑ Updating SSD in session:', {
      old: session.ssd?.substring(0, 8) + '...',
      new: newSsd?.substring(0, 8) + '...'
    });
    
    setSessionState({
      ...session,
      ssd: newSsd
    });
  }, [session]);

  const clearSession = useCallback(() => {
    console.log('üóëÔ∏è Clearing vehicle session');
    setSessionState(null);
  }, []);

  const hasActiveSession = useCallback(() => {
    return !!(session?.vehicleId && session?.ssd && session?.catalog);
  }, [session]);

  const getRequestParams = useCallback(() => {
    if (!hasActiveSession() || !session) {
      return null;
    }
    
    return {
      vehicleId: session.vehicleId,
      ssd: session.ssd,
      catalog: session.catalog
    };
  }, [session, hasActiveSession]);

  const value: VehicleContextType = {
    session,
    setSession,
    updateSsd,
    clearSession,
    hasActiveSession,
    getRequestParams
  };

  return (
    <VehicleContext.Provider value={value}>
      {children}
    </VehicleContext.Provider>
  );
}

export function useVehicle(): VehicleContextType {
  const context = useContext(VehicleContext);
  if (context === undefined) {
    throw new Error('useVehicle must be used within a VehicleProvider');
  }
  return context;
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
 */
export function useVehicleParams(): { vehicleId: string; ssd: string; catalog: string } {
  const { getRequestParams } = useVehicle();
  const params = getRequestParams();
  
  if (!params) {
    throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ VIN –∏–ª–∏ —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞.');
  }
  
  return params;
}
