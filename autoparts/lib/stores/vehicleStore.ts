import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { vehicleApi, VehicleDto, CategoryDto, UnitDto, DetailDto, WizardStepDto, VehicleApiError } from '@/lib/api/vehicle';
import { toast } from 'sonner';

interface VehicleSession {
  vehicleId: string;
  ssd: string;           // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: ssd –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
  catalog: string;
  brand: string;
  name: string;
  attributes?: any[];
}

interface WizardSession {
  catalog: string;
  currentStep: WizardStepDto | null;
  selections: Record<string, string>;
  isActive: boolean;
}

interface VehicleState {
  // –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  currentVehicle: VehicleSession | null;
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞
  wizard: WizardSession | null;
  
  // –ö–µ—à –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–∞
  categories: CategoryDto[];
  units: UnitDto[];
  details: DetailDto[];
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  isLoadingVehicle: boolean;
  isLoadingWizard: boolean;
  isLoadingCategories: boolean;
  isLoadingUnits: boolean;
  isLoadingDetails: boolean;
  
  // –û—à–∏–±–∫–∏
  vehicleError: string | null;
  wizardError: string | null;
  catalogError: string | null;
  
  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
  findByVin: (vin: string, catalog?: string) => Promise<VehicleDto | null>;
  findByFrame: (frame: string, frameNo: string, catalog?: string) => Promise<VehicleDto | null>;
  findByPlate: (plate: string) => Promise<VehicleDto | null>;
  
  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
  startWizard: (catalog: string) => Promise<WizardStepDto | null>;
  nextWizardStep: (selections: Record<string, string>) => Promise<WizardStepDto | null>;
  finishWizard: (selections: Record<string, string>) => Promise<VehicleDto | null>;
  cancelWizard: () => void;
  
  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
  loadCategories: () => Promise<CategoryDto[]>;
  loadUnits: (categoryId: number) => Promise<UnitDto[]>;
  loadUnitDetails: (unitId: number) => Promise<DetailDto[]>;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  clearCurrentVehicle: () => void;
  clearErrors: () => void;
  updateSsd: (newSsd: string) => void; // ‚ö†Ô∏è –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ssd –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
}

export const useVehicleStore = create<VehicleState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      currentVehicle: null,
      wizard: null,
      categories: [],
      units: [],
      details: [],
      
      isLoadingVehicle: false,
      isLoadingWizard: false,
      isLoadingCategories: false,
      isLoadingUnits: false,
      isLoadingDetails: false,
      
      vehicleError: null,
      wizardError: null,
      catalogError: null,

      // –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN
      findByVin: async (vin: string, catalog?: string) => {
        set({ isLoadingVehicle: true, vehicleError: null });

        try {
          const vehicle = await vehicleApi.findByVin(vin, catalog);
          
          // üö® –°–û–•–†–ê–ù–Ø–ï–ú –ù–û–í–£–Æ –°–ï–°–°–ò–Æ –° ssd!
          const newSession: VehicleSession = {
            vehicleId: vehicle.vehicleId,
            ssd: vehicle.ssd,         // ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ!
            catalog: vehicle.catalog,
            brand: vehicle.brand,
            name: vehicle.name,
            attributes: vehicle.attributes
          };

          set({
            currentVehicle: newSession,
            isLoadingVehicle: false,
            vehicleError: null,
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            categories: [],
            units: [],
            details: []
          });

          toast.success(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω: ${vehicle.brand} ${vehicle.name}`);
          console.log(`üöó Vehicle session started. SSD: ${vehicle.ssd}`);
          
          return vehicle;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ VIN:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN';
          
          set({ 
            vehicleError: errorMessage, 
            isLoadingVehicle: false,
            currentVehicle: null
          });
          
          toast.error(errorMessage);
          return null;
        }
      },

      // –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –Ω–æ–º–µ—Ä—É –∫—É–∑–æ–≤–∞
      findByFrame: async (frame: string, frameNo: string, catalog?: string) => {
        set({ isLoadingVehicle: true, vehicleError: null });

        try {
          const vehicle = await vehicleApi.findByFrame(frame, frameNo, catalog);
          
          const newSession: VehicleSession = {
            vehicleId: vehicle.vehicleId,
            ssd: vehicle.ssd,
            catalog: vehicle.catalog,
            brand: vehicle.brand,
            name: vehicle.name,
            attributes: vehicle.attributes
          };

          set({
            currentVehicle: newSession,
            isLoadingVehicle: false,
            vehicleError: null,
            categories: [],
            units: [],
            details: []
          });

          toast.success(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω: ${vehicle.brand} ${vehicle.name}`);
          console.log(`üöó Vehicle session started. SSD: ${vehicle.ssd}`);
          
          return vehicle;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ Frame:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –Ω–æ–º–µ—Ä—É –∫—É–∑–æ–≤–∞';
          
          set({ 
            vehicleError: errorMessage, 
            isLoadingVehicle: false,
            currentVehicle: null
          });
          
          toast.error(errorMessage);
          return null;
        }
      },

      // –ü–æ–∏—Å–∫ –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É
      findByPlate: async (plate: string) => {
        set({ isLoadingVehicle: true, vehicleError: null });

        try {
          const vehicle = await vehicleApi.findByPlate(plate);
          
          const newSession: VehicleSession = {
            vehicleId: vehicle.vehicleId,
            ssd: vehicle.ssd,
            catalog: vehicle.catalog,
            brand: vehicle.brand,
            name: vehicle.name,
            attributes: vehicle.attributes
          };

          set({
            currentVehicle: newSession,
            isLoadingVehicle: false,
            vehicleError: null,
            categories: [],
            units: [],
            details: []
          });

          toast.success(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞–π–¥–µ–Ω: ${vehicle.brand} ${vehicle.name}`);
          console.log(`üöó Vehicle session started. SSD: ${vehicle.ssd}`);
          
          return vehicle;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É';
          
          set({ 
            vehicleError: errorMessage, 
            isLoadingVehicle: false,
            currentVehicle: null
          });
          
          toast.error(errorMessage);
          return null;
        }
      },

      // –ù–∞—á–∞—Ç—å –º–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞
      startWizard: async (catalog: string) => {
        set({ isLoadingWizard: true, wizardError: null });

        try {
          const step = await vehicleApi.wizardStart(catalog);
          
          set({
            wizard: {
              catalog,
              currentStep: step,
              selections: {},
              isActive: true
            },
            isLoadingWizard: false,
            wizardError: null
          });

          toast.success('–ú–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω');
          console.log(`üßô‚Äç‚ôÇÔ∏è Wizard started for catalog: ${catalog}. SSD: ${step.ssd}`);
          
          return step;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ –ø–æ–¥–±–æ—Ä–∞';
          
          set({ 
            wizardError: errorMessage, 
            isLoadingWizard: false,
            wizard: null
          });
          
          toast.error(errorMessage);
          return null;
        }
      },

      // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –º–∞—Å—Ç–µ—Ä–∞
      nextWizardStep: async (selections: Record<string, string>) => {
        const { wizard } = get();
        if (!wizard || !wizard.currentStep) {
          toast.error('–ú–∞—Å—Ç–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
          return null;
        }

        set({ isLoadingWizard: true, wizardError: null });

        try {
          const step = await vehicleApi.wizardNext(
            wizard.catalog, 
            wizard.currentStep.ssd,  // ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º ssd –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            selections
          );
          
          set({
            wizard: {
              ...wizard,
              currentStep: step,
              selections: { ...wizard.selections, ...selections }
            },
            isLoadingWizard: false,
            wizardError: null
          });

          console.log(`üßô‚Äç‚ôÇÔ∏è Wizard step completed. New SSD: ${step.ssd}`);
          
          return step;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —à–∞–≥–∞ –º–∞—Å—Ç–µ—Ä–∞:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ –º–∞—Å—Ç–µ—Ä–∞';
          
          set({ 
            wizardError: errorMessage, 
            isLoadingWizard: false
          });
          
          toast.error(errorMessage);
          return null;
        }
      },

      // –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Å—Ç–µ—Ä
      finishWizard: async (selections: Record<string, string>) => {
        const { wizard } = get();
        if (!wizard || !wizard.currentStep) {
          toast.error('–ú–∞—Å—Ç–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
          return null;
        }

        set({ isLoadingWizard: true, wizardError: null });

        try {
          const vehicle = await vehicleApi.wizardFinish(
            wizard.catalog, 
            wizard.currentStep.ssd,  // ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º ssd –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞
            { ...wizard.selections, ...selections }
          );
          
          // üö® –°–û–ó–î–ê–ï–ú –ù–û–í–£–Æ –°–ï–°–°–ò–Æ –° –§–ò–ù–ê–õ–¨–ù–´–ú ssd!
          const newSession: VehicleSession = {
            vehicleId: vehicle.vehicleId,
            ssd: vehicle.ssd,        // ‚ö†Ô∏è –§–∏–Ω–∞–ª—å–Ω—ã–π ssd –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
            catalog: vehicle.catalog,
            brand: vehicle.brand,
            name: vehicle.name,
            attributes: vehicle.attributes
          };

          set({
            currentVehicle: newSession,
            wizard: null,            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞—Å—Ç–µ—Ä
            isLoadingWizard: false,
            wizardError: null,
            categories: [],
            units: [],
            details: []
          });

          toast.success(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–¥–æ–±—Ä–∞–Ω: ${vehicle.brand} ${vehicle.name}`);
          console.log(`üöó Vehicle found via wizard. Final SSD: ${vehicle.ssd}`);
          
          return vehicle;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞';
          
          set({ 
            wizardError: errorMessage, 
            isLoadingWizard: false
          });
          
          toast.error(errorMessage);
          return null;
        }
      },

      // –û—Ç–º–µ–Ω–∏—Ç—å –º–∞—Å—Ç–µ—Ä
      cancelWizard: () => {
        set({ wizard: null, wizardError: null });
        toast.info('–ú–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω');
      },

      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      loadCategories: async () => {
        const { currentVehicle } = get();
        if (!currentVehicle) {
          toast.error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å');
          return [];
        }

        set({ isLoadingCategories: true, catalogError: null });

        try {
          const categories = await vehicleApi.getCategories(
            currentVehicle.catalog,
            currentVehicle.vehicleId,
            currentVehicle.ssd        // ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ssd
          );
          
          set({
            categories,
            isLoadingCategories: false,
            catalogError: null
          });

          console.log(`üìÇ Categories loaded. Count: ${categories.length}`);
          
          return categories;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π';
          
          set({ 
            catalogError: errorMessage, 
            isLoadingCategories: false,
            categories: []
          });
          
          toast.error(errorMessage);
          return [];
        }
      },

      // –ó–∞–≥—Ä—É–∑–∏—Ç—å —É–∑–ª—ã
      loadUnits: async (categoryId: number) => {
        const { currentVehicle } = get();
        if (!currentVehicle) {
          toast.error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å');
          return [];
        }

        set({ isLoadingUnits: true, catalogError: null });

        try {
          const units = await vehicleApi.getUnits(
            currentVehicle.catalog,
            currentVehicle.vehicleId,
            currentVehicle.ssd,       // ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ssd
            categoryId
          );
          
          set({
            units,
            isLoadingUnits: false,
            catalogError: null
          });

          console.log(`üîß Units loaded for category ${categoryId}. Count: ${units.length}`);
          
          return units;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–∑–ª–æ–≤:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–∑–ª–æ–≤';
          
          set({ 
            catalogError: errorMessage, 
            isLoadingUnits: false,
            units: []
          });
          
          toast.error(errorMessage);
          return [];
        }
      },

      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —É–∑–ª–∞
      loadUnitDetails: async (unitId: number) => {
        const { currentVehicle } = get();
        if (!currentVehicle) {
          toast.error('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å');
          return [];
        }

        set({ isLoadingDetails: true, catalogError: null });

        try {
          const details = await vehicleApi.getUnitDetails(
            currentVehicle.catalog,
            unitId,
            currentVehicle.ssd        // ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ssd
          );
          
          set({
            details,
            isLoadingDetails: false,
            catalogError: null
          });

          console.log(`üî© Details loaded for unit ${unitId}. Count: ${details.length}`);
          
          return details;

        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
          const errorMessage = error instanceof VehicleApiError 
            ? error.message 
            : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π';
          
          set({ 
            catalogError: errorMessage, 
            isLoadingDetails: false,
            details: []
          });
          
          toast.error(errorMessage);
          return [];
        }
      },

      // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
      clearCurrentVehicle: () => {
        set({
          currentVehicle: null,
          categories: [],
          units: [],
          details: [],
          vehicleError: null,
          catalogError: null
        });
        console.log('üßπ Vehicle session cleared');
      },

      // –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
      clearErrors: () => {
        set({
          vehicleError: null,
          wizardError: null,
          catalogError: null
        });
      },

      // –û–±–Ω–æ–≤–∏—Ç—å ssd (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω–µ—Ç –Ω–æ–≤—ã–π)
      updateSsd: (newSsd: string) => {
        const { currentVehicle } = get();
        if (currentVehicle) {
          set({
            currentVehicle: {
              ...currentVehicle,
              ssd: newSsd
            }
          });
          console.log(`üîÑ SSD updated: ${newSsd}`);
        }
      },

    }),
    {
      name: 'vehicle-session-storage',
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      partialize: (state) => ({ 
        currentVehicle: state.currentVehicle,
        categories: state.categories,
        units: state.units 
      }),
    }
  )
);
