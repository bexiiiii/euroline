import { ApiError } from './types';

const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080';

export interface VehicleDto {
  vehicleId: string;
  ssd: string;        // ‚ö†Ô∏è –í–ê–ñ–ù–û: —ç—Ç–æ—Ç ssd –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ state!
  catalog: string;
  brand: string;
  name: string;
  attributes?: VehicleAttrDto[];
}

export interface VehicleAttrDto {
  name: string;
  value: string;
  unit?: string;
}

export interface CategoryDto {
  id: number;
  parentId?: number;
  code: string;
  name: string;
  imageUrl?: string;
}

export interface UnitDto {
  id?: number; // –°—Ç–∞—Ä–æ–µ –ø–æ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  unitId?: number; // –ù–æ–≤–æ–µ –ø–æ–ª–µ –∏–∑ API
  code: string;
  name: string;
  imageUrl?: string;
  description?: string;
  filtered?: boolean; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–∑ API
}

export interface UnitInfoDto {
  unitId: number;
  code: string;
  name: string;
  note?: string;
  imageUrl?: string;
  quickGroups?: QuickGroupDto[];
}

export interface DetailDto {
  detailId: number;
  oem: string;
  name: string;
  qty?: number;
  applicability?: string;
  brand?: string;
  catalog?: string;
  
  // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å—Ö–µ–º—ã
  imageUrl?: string;
  largeImageUrl?: string;
  codeOnImage?: string;
  images?: string[];
  
  // –û–ø–∏—Å–∞–Ω–∏—è –∏ –∑–∞–º–µ—Ç–∫–∏
  note?: string;
  additionalNote?: string;
  footnote?: string;
  description?: string;
  componentCode?: string;
  
  // OEM –∏ –∑–∞–º–µ–Ω—è–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞
  replacedOem?: string;
  alternativeOems?: string[];
  
  // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  price?: string;
  weight?: string;
  dimensions?: string;
  match?: string;
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç Unit
  unitName?: string;
  unitCode?: string;
  unitId?: number;
  unitSsd?: string;
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç Category
  categoryName?: string;
  categoryId?: number;
  categoryCode?: string;
  categorySsd?: string;
  
  // –ê—Ç—Ä–∏–±—É—Ç—ã –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  allAttributes?: { [key: string]: string };
  rawXml?: string;
  
  // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
  id?: number;
  attributes?: DetailAttrDto[];
}

export interface DetailAttrDto {
  name: string;
  value: string;
  unit?: string;
}

export interface WizardStepDto {
  ssd: string;        // ‚ö†Ô∏è –í–ê–ñ–ù–û: –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ!
  params: WizardParamDto[];
  finalStep: boolean;
}

export interface WizardParamDto {
  code: string;
  label: string;
  values: WizardValueDto[];
}

export interface WizardValueDto {
  code: string;
  label: string;
}

export interface QuickGroupDto {
  id: number;
  name: string;
  code?: string;
  link?: boolean;     // —É–∫–∞–∑—ã–≤–∞–µ—Ç, –≤–µ–¥–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–µ—Ç–∞–ª—è–º
  synonyms?: string;  // —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
  children: QuickGroupDto[]; // –¥–æ—á–µ—Ä–Ω–∏–µ –≥—Ä—É–ø–ø—ã
}

export interface CategoryNodeDto {
  id: number;
  parentId?: number;
  code: string;
  name: string;
  units: UnitDto[];
}

export interface ImageMapDto {
  /** ID –¥–µ—Ç–∞–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ) */
  detailId?: number;
  /** –ö–æ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–Ω–æ–º–µ—Ä –¥–µ—Ç–∞–ª–∏) */
  callout: string;
  /** –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X */
  x: number;
  /** –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y */
  y: number;
  /** –®–∏—Ä–∏–Ω–∞ –æ–±–ª–∞—Å—Ç–∏ */
  w: number;
  /** –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ */
  h: number;
}

export class VehicleApiError extends Error {
  constructor(
    message: string,
    public status?: number,
    public code?: string
  ) {
    super(message);
    this.name = 'VehicleApiError';
  }
}

/**
 * üö® –í–ê–ñ–ù–û –î–õ–Ø –†–ê–ë–û–¢–´ –° SSD:
 * 
 * –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è (findByVin/findByFrame/wizardFinish), 
 * –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ ssd –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ 
 * –≤–æ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
 * 
 * –ü—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ VIN –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ wizard - –∑–∞–º–µ–Ω—è–π—Ç–µ —Å—Ç–∞—Ä—ã–π ssd –Ω–æ–≤—ã–º!
 */
class VehicleApi {
  private async request<T>(endpoint: string, options?: RequestInit): Promise<T> {
    try {
      const url = `${API_BASE}${endpoint}`;
      const response = await fetch(url, {
        headers: {
          'Content-Type': 'application/json',
          ...options?.headers,
        },
        ...options,
      });

      if (!response.ok) {
        let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
        
        try {
          const errorData = await response.json();
          if (errorData.message) {
            errorMessage = errorData.message;
          } else if (errorData.error) {
            errorMessage = errorData.error;
          }
        } catch {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
        }

        throw new VehicleApiError(
          errorMessage,
          response.status,
          response.status.toString()
        );
      }

      const data = await response.json();
      return data;
    } catch (error) {
      if (error instanceof VehicleApiError) {
        throw error;
      }

      if (error instanceof TypeError && error.message.includes('fetch')) {
        throw new VehicleApiError(
          '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.',
          0,
          'NETWORK_ERROR'
        );
      }

      throw new VehicleApiError(
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API',
        0,
        'UNKNOWN_ERROR'
      );
    }
  }

  // ===== –ü–û–ò–°–ö –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô (–≤–æ–∑–≤—Ä–∞—â–∞—é—Ç ssd) =====

  /**
   * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ VIN –Ω–æ–º–µ—Ä—É
   * üö® –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ssd –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!
   */
  async findByVin(vin: string, catalog?: string): Promise<VehicleDto> {
    const params = new URLSearchParams();
    if (catalog) params.append('catalog', catalog);
    
    const query = params.toString();
    const endpoint = `/v1/cat/vehicle/by-vin/${encodeURIComponent(vin)}${query ? '?' + query : ''}`;
    
    return this.request<VehicleDto>(endpoint);
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –Ω–æ–º–µ—Ä—É –∫—É–∑–æ–≤–∞
   * üö® –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ssd –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!
   */
  async findByFrame(frame: string, frameNo: string, catalog?: string): Promise<VehicleDto> {
    const params = new URLSearchParams({ frame, frameNo });
    if (catalog) params.append('catalog', catalog);
    
    return this.request<VehicleDto>(`/v1/cat/vehicle/by-frame?${params.toString()}`);
  }

  /**
   * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –≥–æ—Å–Ω–æ–º–µ—Ä—É
   * üö® –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ssd –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏!
   */
  async findByPlate(plate: string): Promise<VehicleDto> {
    return this.request<VehicleDto>(`/v1/cat/vehicle/by-plate/${encodeURIComponent(plate)}`);
  }

  // ===== WIZARD (–º–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è) =====

  /**
   * –ù–∞—á–∞—Ç—å –º–∞—Å—Ç–µ—Ä –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
   */
  async wizardStart(catalog: string): Promise<WizardStepDto> {
    return this.request<WizardStepDto>(`/v1/cat/${encodeURIComponent(catalog)}/wizard/start`);
  }

  /**
   * –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –º–∞—Å—Ç–µ—Ä–∞
   * üö® –¢–†–ï–ë–£–ï–¢ ssd –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞!
   */
  async wizardNext(
    catalog: string, 
    ssd: string, 
    selections: Record<string, string>
  ): Promise<WizardStepDto> {
    const params = new URLSearchParams({ ssd });
    
    return this.request<WizardStepDto>(`/v1/cat/${encodeURIComponent(catalog)}/wizard/next?${params.toString()}`, {
      method: 'POST',
      body: JSON.stringify(selections),
    });
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Å—Ç–µ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å
   * üö® –¢–†–ï–ë–£–ï–¢ ssd! –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–≤—ã–º/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º ssd!
   */
  async wizardFinish(
    catalog: string, 
    ssd: string, 
    selections: Record<string, string>
  ): Promise<VehicleDto> {
    const params = new URLSearchParams({ ssd });
    
    return this.request<VehicleDto>(`/v1/cat/${encodeURIComponent(catalog)}/wizard/finish?${params.toString()}`, {
      method: 'POST',
      body: JSON.stringify(selections),
    });
  }

  // ===== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –ö–ê–¢–ê–õ–û–ì–£ (–≤—Å–µ —Ç—Ä–µ–±—É—é—Ç ssd!) =====

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
   * üö® –¢–†–ï–ë–£–ï–¢ ssd –∏–∑ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è!
   */
  async getCategories(catalog: string, vehicleId: string, ssd: string): Promise<CategoryDto[]> {
    const params = new URLSearchParams({ vehicleId, ssd });
    return this.request<CategoryDto[]>(`/v1/cat/${encodeURIComponent(catalog)}/categories?${params.toString()}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É–∑–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * üö® –¢–†–ï–ë–£–ï–¢ ssd!
   */
  async getUnits(
    catalog: string, 
    vehicleId: string, 
    ssd: string, 
    categoryId: number
  ): Promise<UnitDto[]> {
    const params = new URLSearchParams({ 
      vehicleId, 
      ssd, 
      categoryId: categoryId.toString() 
    });
    return this.request<UnitDto[]>(`/v1/cat/${encodeURIComponent(catalog)}/units?${params.toString()}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–∑–ª–µ
   * üö® –¢–†–ï–ë–£–ï–¢ ssd!
   */
  async getUnitInfo(catalog: string, unitId: number, ssd: string): Promise<UnitInfoDto> {
    const params = new URLSearchParams({ ssd });
    return this.request<UnitInfoDto>(`/v1/cat/${encodeURIComponent(catalog)}/units/${unitId}?${params.toString()}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç–∏ –≤ —É–∑–ª–µ
   * üö® –¢–†–ï–ë–£–ï–¢ ssd!
   */
  async getUnitDetails(catalog: string, unitId: number, ssd: string): Promise<DetailDto[]> {
    const params = new URLSearchParams({ ssd });
    return this.request<DetailDto[]>(`/v1/cat/${encodeURIComponent(catalog)}/units/${unitId}/details?${params.toString()}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–∑–ª–∞
   * üö® –¢–†–ï–ë–£–ï–¢ ssd!
   */
  async getUnitImageMap(catalog: string, unitId: number, ssd: string): Promise<ImageMapDto[]> {
    const params = new URLSearchParams({ ssd });
    return this.request<ImageMapDto[]>(`/v1/cat/${encodeURIComponent(catalog)}/units/${unitId}/imagemap?${params.toString()}`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —É–∑–ª–∞–º–∏
   * üö® –¢–†–ï–ë–£–ï–¢ ssd!
   */
  async getCategoryTree(catalog: string, vehicleId: string, ssd: string): Promise<CategoryNodeDto[]> {
    const params = new URLSearchParams({ vehicleId, ssd });
    return this.request<CategoryNodeDto[]>(`/v1/cat/${encodeURIComponent(catalog)}/tree?${params.toString()}`);
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–µ –≥—Ä—É–ø–ø—ã –∑–∞–ø—á–∞—Å—Ç–µ–π
   * üö® –¢–†–ï–ë–£–ï–¢ ssd!
   */
  async getQuickGroups(catalog: string, vehicleId: string, ssd: string): Promise<QuickGroupDto[]> {
    const params = new URLSearchParams({ vehicleId, ssd });
    return this.request<QuickGroupDto[]>(`/v1/cat/${encodeURIComponent(catalog)}/quick/groups?${params.toString()}`);
  }

  /**
   * –ó–∞–ø—á–∞—Å—Ç–∏ –≤ –±—ã—Å—Ç—Ä–æ–π –≥—Ä—É–ø–ø–µ
   * üö® –¢–†–ï–ë–£–ï–¢ ssd!
   */
  async getQuickDetails(
    catalog: string, 
    vehicleId: string, 
    ssd: string, 
    groupId: number
  ): Promise<DetailDto[]> {
    const params = new URLSearchParams({ 
      vehicleId, 
      ssd, 
      groupId: groupId.toString() 
    });
    return this.request<DetailDto[]>(`/v1/cat/${encodeURIComponent(catalog)}/quick/details?${params.toString()}`);
  }

  /**
   * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
   * üö® –¢–†–ï–ë–£–ï–¢ ssd!
   */
  async getVehicleInfo(catalog: string, vehicleId: string, ssd: string): Promise<VehicleDto> {
    const params = new URLSearchParams({ vehicleId, ssd });
    return this.request<VehicleDto>(`/v1/cat/${encodeURIComponent(catalog)}/vehicle/info?${params.toString()}`);
  }

  // ===== –ü–û–ò–°–ö –ó–ê–ü–ß–ê–°–¢–ï–ô –ë–ï–ó ssd =====

  /**
   * –ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é)
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ù–ï —Ç—Ä–µ–±—É–µ—Ç ssd
   */
  async searchDetails(query: string, catalog?: string): Promise<DetailDto[]> {
    const params = new URLSearchParams({ query });
    if (catalog) params.append('catalog', catalog);
    
    return this.request<DetailDto[]>(`//v1/cat/search-by-text?${params.toString()}`);
  }

}

export const vehicleApi = new VehicleApi();
