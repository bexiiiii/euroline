"use client"

import { useState, useCallback } from "react"
import { ChevronRight, Folder, File, Loader2 } from "lucide-react"
import { AnimatePresence, motion } from "framer-motion"
import { useVehicle } from "@/context/VehicleContext"
import { vehicleApi, DetailDto } from "@/lib/api/vehicle"
import { apiCache } from "@/lib/cache"

type TreeNode = {
  name: string
  nodes?: TreeNode[]
  id?: number | string
  type?: 'category' | 'unit' | 'detail' | 'quickgroup' | 'system'
  data?: any
  isLoaded?: boolean
}

interface LazyTreeItemProps {
  node: TreeNode
  animated?: boolean
  onNodeUpdate?: (nodeId: string, updatedNode: TreeNode) => void
  onQuickGroupSelected?: (groupId: number, groupName: string, details: DetailDto[]) => void
  onQuickGroupLoading?: (groupId: number, groupName: string) => void
}

export function LazyTreeItem({
  node,
  animated = false,
  onNodeUpdate,
  onQuickGroupSelected,
  onQuickGroupLoading,
}: LazyTreeItemProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const { session } = useVehicle()

  // –û—Ç–ª–∞–¥–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ
  console.log(`üéØ Rendering LazyTreeItem: "${node.name}" (${node.type})`, {
    id: node.id,
    link: node.data?.link,
    isLoaded: node.isLoaded,
    hasNodes: node.nodes?.length || 0
  })

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–∑–ª–∞
  const loadUnitDetails = useCallback(async (unitId: number) => {
    if (!session?.catalog || !session?.ssd) {
      console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π')
      return []
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞
    const cacheKey = `unit-details-${session.catalog}-${unitId}-${session.ssd}`
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cachedDetails = apiCache.get(cacheKey)
    if (cachedDetails) {
      console.log('–î–µ—Ç–∞–ª–∏ —É–∑–ª–∞', unitId, '–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞')
      return cachedDetails
    }

    try {
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–∑–ª–∞:', unitId)
      const details = await vehicleApi.getUnitDetails(session.catalog, unitId, session.ssd)
      
      const treeNodes = details.map(detail => ({
        name: detail.name,
        id: detail.id,
        type: 'detail' as const,
        data: detail,
        isLoaded: true
      }))

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –Ω–∞ 5 –º–∏–Ω—É—Ç
      apiCache.set(cacheKey, treeNodes, 5 * 60 * 1000)
      
      return treeNodes
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —É–∑–ª–∞', unitId, ':', error)
      return []
    }
  }, [session])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ QuickGroup (–¥–ª—è —É–∑–ª–æ–≤ —Å link=true)
  const loadQuickGroupDetails = useCallback(async (groupId: number) => {
    if (!session?.catalog || !session?.ssd || !session?.vehicleId) {
      console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ QuickGroup –¥–µ—Ç–∞–ª–µ–π')
      return []
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞
    const cacheKey = `quickgroup-details-${session.catalog}-${groupId}-${session.vehicleId}-${session.ssd}`
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cachedDetails = apiCache.get(cacheKey)
    if (cachedDetails) {
      console.log('QuickGroup –¥–µ—Ç–∞–ª–∏', groupId, '–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫–µ—à–∞')
      return cachedDetails
    }

    try {
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º QuickGroup –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã:', groupId)
      const details = await vehicleApi.getQuickDetails(
        session.catalog, 
        session.vehicleId, 
        session.ssd, 
        groupId
      )
      
      const treeNodes = details.map(detail => ({
        name: `${detail.oem || 'N/A'} - ${detail.name}`,
        id: detail.id || `detail-${Math.random()}`,
        type: 'detail' as const,
        data: detail,
        isLoaded: true
      }))

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à –Ω–∞ 5 –º–∏–Ω—É—Ç
      apiCache.set(cacheKey, treeNodes, 5 * 60 * 1000)
      
      return treeNodes
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ QuickGroup –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –≥—Ä—É–ø–ø—ã', groupId, ':', error)
      return []
    }
  }, [session])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —É–∑–ª–∞ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
  const handleToggle = useCallback(async () => {
    console.log(`üöÄ HANDLE TOGGLE CALLED for ${node.type}-${node.id} "${node.name}"`, {
      isOpen,
      isLoaded: node.isLoaded,
      hasChildren: !!node.nodes?.length,
      nodeData: node.data
    })

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è QuickGroup —Å link=true - —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
    if (node.type === 'quickgroup' && node.data?.link === true && node.data?.id) {
      const groupId = node.data.id
      if (groupId != null && groupId > 0 && !node.isLoaded) {
        console.log(`LazyTreeItem: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è QuickGroup ${groupId}`)
        setIsLoading(true)
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (onQuickGroupLoading) {
          onQuickGroupLoading(groupId, node.name)
        }
        
        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ API –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é
          const apiDetails = await vehicleApi.getQuickDetails(
            session.catalog!, 
            session.vehicleId!, 
            session.ssd!, 
            groupId
          )
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
          if (onQuickGroupSelected) {
            onQuickGroupSelected(groupId, node.name, apiDetails)
          }
          
          // –î–ª—è QuickGroup –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ –¥–µ—Ç–∞–ª—è–º–∏ - –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
          const updatedNode: TreeNode = {
            ...node,
            isLoaded: true,
            // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º nodes: details - –¥–µ—Ç–∞–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ CatalogCardComponent
          }
          
          console.log('LazyTreeItem: –û–±–Ω–æ–≤–ª—è–µ–º QuickGroup —É–∑–µ–ª –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –≤ –¥–µ—Ä–µ–≤–µ')
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          if (onNodeUpdate) {
            onNodeUpdate(`${node.type}-${node.id}`, updatedNode)
          }
        } catch (error) {
          console.error(`LazyTreeItem: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è QuickGroup ${groupId}:`, error)
        } finally {
          setIsLoading(false)
        }
      } else if (node.isLoaded) {
        // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞
        console.log(`LazyTreeItem: QuickGroup ${groupId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ`)
        if (onQuickGroupSelected && session) {
          try {
            const apiDetails = await vehicleApi.getQuickDetails(
              session.catalog, 
              session.vehicleId, 
              session.ssd, 
              groupId
            )
            onQuickGroupSelected(groupId, node.name, apiDetails)
          } catch (error) {
            console.error(`LazyTreeItem: –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è QuickGroup ${groupId}:`, error)
          }
        }
      }
      
      // –î–ª—è QuickGroup —Å link=true –ù–ï –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ isOpen - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
      return
    }

    // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤
    if (!isOpen) {
      // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º —É–∑–µ–ª
      if (node.type === 'unit' && !node.isLoaded && node.id && typeof node.id === 'number') {
        console.log(`LazyTreeItem: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è —É–∑–ª–∞ ${node.id}`)
        setIsLoading(true)
        try {
          const details = await loadUnitDetails(node.id)
          console.log(`LazyTreeItem: –ü–æ–ª—É—á–µ–Ω–æ ${details.length} –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —É–∑–ª–∞ ${node.id}`)
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
          const updatedNode: TreeNode = {
            ...node,
            nodes: details,
            isLoaded: true
          }
          
          console.log('LazyTreeItem: –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª —á–µ—Ä–µ–∑ onNodeUpdate')
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
          if (onNodeUpdate) {
            onNodeUpdate(`${node.type}-${node.id}`, updatedNode)
          }
        } catch (error) {
          console.error(`LazyTreeItem: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è —É–∑–ª–∞ ${node.id}:`, error)
        } finally {
          setIsLoading(false)
        }
      }
    }
    
    // –†–∞—Å–∫—Ä—ã–≤–∞–µ–º/—Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —É–∑–µ–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    setIsOpen(!isOpen)
  }, [isOpen, node, loadUnitDetails, onNodeUpdate, onQuickGroupSelected, onQuickGroupLoading, session])

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const hasChildren = node.nodes && node.nodes.length > 0
  const canExpandQuickGroup = node.type === 'quickgroup' && node.data?.link === true && node.data?.id && node.data.id > 0 && !node.isLoaded
  // –î–ª—è —É–∑–ª–æ–≤ QuickGroup —Å link=true –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫—É —Ä–∞—Å–∫—Ä—ã—Ç–∏—è - –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
  const canExpand = hasChildren || 
                   (node.type === 'unit' && !node.isLoaded)
                   // –£–±–∏—Ä–∞–µ–º canExpandQuickGroup - –¥–ª—è link=true —É–∑–ª–æ–≤ –Ω–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫–∏

  // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è —É–∑–ª–æ–≤ —Å link=true
  if (node.type === 'quickgroup' && node.data?.link === true) {
    console.log(`üîó QuickGroup with link=true: "${node.name}"`, {
      'data.id': node.data?.id,
      'data.link': node.data?.link,
      'isLoaded': node.isLoaded,
      'canExpandQuickGroup': canExpandQuickGroup,
      'canExpand': canExpand,
      'hasChildren': hasChildren
    })
  }

  // –û–±—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ–±–æ–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  const ChevronIcon = () => {
    if (isLoading) {
      return <Loader2 className="size-4 text-gray-500 animate-spin" />
    }

    return animated ? (
      <motion.span
        animate={{ rotate: isOpen ? 90 : 0 }}
        transition={{ type: "spring", bounce: 0, duration: 0.4 }}
        className="flex"
      >
        <ChevronRight className="size-4 text-gray-500" />
      </motion.span>
    ) : (
      <ChevronRight
        className={`size-4 text-gray-500 transition-transform ${isOpen ? "rotate-90" : ""}`}
      />
    )
  }

  const ChildrenList = () => {
    if (!hasChildren || !isOpen) return null

    const children = node.nodes?.map((childNode) => (
      <LazyTreeItem 
        node={childNode} 
        key={`${childNode.type}-${childNode.id}-${childNode.name}`} 
        animated={animated}
        onNodeUpdate={onNodeUpdate}
        onQuickGroupSelected={onQuickGroupSelected}
        onQuickGroupLoading={onQuickGroupLoading}
      />
    ))

    if (animated) {
      return (
        <AnimatePresence>
          <motion.ul
            initial={{ height: 0 }}
            animate={{ height: "auto" }}
            exit={{ height: 0 }}
            transition={{ type: "spring", bounce: 0, duration: 0.4 }}
            className="pl-6 overflow-hidden flex flex-col justify-end"
          >
            {children}
          </motion.ul>
        </AnimatePresence>
      )
    }

    return <ul className="pl-6">{children}</ul>
  }

  return (
    <li key={`${node.type}-${node.id}-${node.name}`}>
      <div className="flex items-center gap-1.5 py-1">
        {canExpand && (
          <button 
            onClick={(e) => {
              e.preventDefault()
              e.stopPropagation()
              console.log(`üîò BUTTON CLICKED for ${node.type}-${node.id} "${node.name}"`)
              handleToggle()
            }}
            className="p-1 -m-1 hover:bg-gray-100 rounded flex-shrink-0"
            disabled={isLoading}
            type="button"
          >
            <ChevronIcon />
          </button>
        )}
        {canExpand && console.log(`üî≤ BUTTON RENDERED for ${node.type}-${node.id} "${node.name}", canExpand: ${canExpand}`)}

        {node.type === 'detail' ? (
          <File className="ml-[22px] size-6 text-gray-900 flex-shrink-0" />
        ) : (
          <Folder
            className={`size-6 text-orange-600 fill-orange-600 flex-shrink-0 ${
              !canExpand ? "ml-[22px]" : ""
            }`}
          />
        )}
        
        {/* –î–ª—è QuickGroup —Å link=true –¥–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Å–µ–≥–¥–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º */}
        {node.type === 'quickgroup' && node.data?.link === true ? (
          <button
            onClick={(e) => {
              e.preventDefault()
              e.stopPropagation()
              console.log(`üîó TEXT CLICKED for ${node.type}-${node.id} "${node.name}"`)
              handleToggle()
            }}
            className="text-left hover:text-blue-600 hover:underline cursor-pointer text-gray-900 flex-1"
            disabled={isLoading}
            type="button"
          >
            {node.name}
          </button>
        ) : (
          <span className="select-none">{node.name}</span>
        )}
      </div>

      <ChildrenList />
    </li>
  )
}
