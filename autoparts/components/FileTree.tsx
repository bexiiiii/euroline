"use client"

import React, { useState, useCallback } from "react"
import { LazyTreeItem } from "@/components/ui/lazy-tree-item"
import { useVehicle } from "@/context/VehicleContext"
import { vehicleApi } from "@/lib/api/vehicle"
import { CategoryNodeDto, UnitDto, DetailDto, QuickGroupDto } from "@/lib/api/vehicle"

// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è FilesystemItem
type TreeNode = {
  name: string
  nodes?: TreeNode[]
  id?: number | string
  type?: 'category' | 'unit' | 'detail' | 'quickgroup' | 'system'
  data?: CategoryNodeDto | UnitDto | DetailDto | QuickGroupDto | { name: string, items: QuickGroupDto[] }
  isLoaded?: boolean  // –§–ª–∞–≥ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
}

interface FileTreeProps {
  className?: string
  onQuickGroupSelected?: (groupId: number, groupName: string, details: DetailDto[]) => void
  onQuickGroupLoading?: (groupId: number, groupName: string) => void
}

export default function FileTree({ className, onQuickGroupSelected, onQuickGroupLoading }: FileTreeProps) {
  const { session } = useVehicle()
  const [treeData, setTreeData] = useState<TreeNode[]>([])
  const [loading, setLoading] = useState(false)
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set())
  const [showOnlyTO, setShowOnlyTO] = useState(true) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¢–û

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('FileTree: –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è:', {
    hasSession: !!session,
    vehicleId: session?.vehicleId,
    catalog: session?.catalog,
    brand: session?.brand,
    name: session?.name,
    hasSsd: !!session?.ssd
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–∑–ª–∞ (–¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
  const handleNodeUpdate = useCallback((nodeId: string, updatedNode: TreeNode) => {
    console.log(`FileTree: –û–±–Ω–æ–≤–ª—è–µ–º —É–∑–µ–ª ${nodeId}`, {
      nodeName: updatedNode.name,
      hasNodes: !!updatedNode.nodes?.length,
      nodesCount: updatedNode.nodes?.length || 0
    })
    
    setTreeData(prevData => {
      const updateNodeRecursive = (nodes: TreeNode[]): TreeNode[] => {
        return nodes.map(node => {
          const currentNodeId = `${node.type}-${node.id}`
          if (currentNodeId === nodeId) {
            console.log(`FileTree: –ù–∞–π–¥–µ–Ω —É–∑–µ–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${currentNodeId}`)
            return updatedNode
          }
          if (node.nodes) {
            return {
              ...node,
              nodes: updateNodeRecursive(node.nodes)
            }
          }
          return node
        })
      }
      const result = updateNodeRecursive(prevData)
      console.log('FileTree: –î–µ—Ä–µ–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
      return result
    })
  }, [])

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CategoryNodeDto –≤ TreeNode, —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –¢–û –≥—Ä—É–ø–ø
  const convertCategoryTree = useCallback((categories: CategoryNodeDto[], filterTO: boolean = true): TreeNode[] => {
    let filteredCategories = categories
    
    if (filterTO) {
      // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è" –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¢–û
      filteredCategories = categories.filter(category => 
        category.name.includes('–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è') ||
        category.name.includes('–¢–û') ||
        category.name.includes('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ')
      )
      
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ "–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è", –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –µ—ë –∏ —Ä–∞–∑–≤–µ—Ä–Ω—ë–º —é–Ω–∏—Ç—ã –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const generalCategory = categories.find(cat => cat.name.includes('–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è'))
      
      if (generalCategory && generalCategory.units) {
        console.log('FileTree: –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–û–±—â–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è" —Å —é–Ω–∏—Ç–∞–º–∏:', {
          category: generalCategory.name,
          unitsCount: generalCategory.units.length,
          units: generalCategory.units.map(u => u.name)
        })
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¢–û —é–Ω–∏—Ç–∞
        const toUnits = generalCategory.units.filter(unit => 
          unit.name.includes('–¢–û') || unit.name.includes('–ö–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –¢–û')
        )
        
        if (toUnits.length > 0) {
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —é–Ω–∏—Ç—ã –¢–û –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
          return toUnits.map(unit => ({
            name: unit.name,
            id: unit.unitId || unit.id,
            type: 'unit' as const,
            data: unit,
            isLoaded: false,
            nodes: [] // –î–µ—Ç–∞–ª–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–∑–∂–µ
          }))
        }
      }
      
      console.log('FileTree: –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¢–û:', {
        –≤—Å–µ–≥–æ: categories.length,
        –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: filteredCategories.length,
        –Ω–∞–∑–≤–∞–Ω–∏—è: filteredCategories.map(c => c.name)
      })
    }
    
    return filteredCategories.map(category => ({
      name: category.name,
      id: category.id,
      type: 'category' as const,
      data: category,
      nodes: category.units?.map(unit => ({
        name: unit.name,
        id: unit.unitId || unit.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º unitId –∏–∑ API
        type: 'unit' as const,
        data: unit,
        isLoaded: false, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µz–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        nodes: [] // –î–µ—Ç–∞–ª–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–∑–∂–µ
      })) || []
    }))
  }, [])

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ Quick Groups –≤ TreeNode
  const convertQuickGroupsToTree = useCallback((quickGroups: QuickGroupDto[]): TreeNode[] => {
    const convertGroup = (group: QuickGroupDto): TreeNode => {
      const treeNode: TreeNode = {
        id: group.id.toString(),
        name: group.name,
        type: 'quickgroup' as const,
        data: group, // –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç group, –≤–∫–ª—é—á–∞—è id –∏ link
        isLoaded: group.link === true ? false : true, // –ï—Å–ª–∏ link=true, —Ç–æ –Ω—É–∂–Ω–∞ –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        nodes: group.children && group.link === false ? group.children.map(convertGroup) : []
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã–µ —É–∑–ª—ã
      console.log(`üå≥ Converting group: "${group.name}"`, {
        'id': group.id,
        'link': group.link,
        'children.length': group.children?.length || 0,
        'isLoaded': treeNode.isLoaded,
        'nodes.length': treeNode.nodes?.length || 0
      })
      
      return treeNode
    }

    console.log('FileTree: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Quick Groups –≤ –¥–µ—Ä–µ–≤–æ:', quickGroups.length)
    
    return quickGroups.map(convertGroup)
  }, [])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const loadCategoryTree = useCallback(async () => {
    if (!session?.vehicleId || !session?.ssd || !session?.catalog) {
      console.warn('FileTree: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', {
        vehicleId: session?.vehicleId,
        ssd: session?.ssd ? '–µ—Å—Ç—å' : '–Ω–µ—Ç',
        catalog: session?.catalog
      })
      return
    }

    console.log('FileTree: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', {
      catalog: session.catalog,
      vehicleId: session.vehicleId,
      ssd: session.ssd.substring(0, 20) + '...',
      showOnlyTO
    })

    setLoading(true)
    try {
      if (showOnlyTO) {
        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å Quick Groups –¥–ª—è –¢–û
        try {
          const quickGroups = await vehicleApi.getQuickGroups(
            session.catalog, 
            session.vehicleId, 
            session.ssd
          )
          
          console.log('FileTree: –ó–∞–≥—Ä—É–∂–µ–Ω–æ Quick Groups:', quickGroups.length)
          
          if (quickGroups.length > 0) {
            const treeNodes = convertQuickGroupsToTree(quickGroups)
            setTreeData(treeNodes)
            console.log('FileTree: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã Quick Groups —É–∑–ª—ã:', treeNodes.length, treeNodes.map(s => s.name))
            return
          } else {
            console.log('FileTree: Quick Groups –ø—É—Å—Ç—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ã—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ')
          }
        } catch (quickGroupError) {
          console.error('FileTree: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Quick Groups, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ:', quickGroupError)
        }
      }
      
      // Fallback –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞
      const categories = await vehicleApi.getCategoryTree(
        session.catalog, 
        session.vehicleId, 
        session.ssd
      )
      
      console.log('FileTree: –ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories.length)
      const treeNodes = convertCategoryTree(categories, showOnlyTO)
      setTreeData(treeNodes)
      
    } catch (error) {
      console.error('FileTree: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error)
    } finally {
      setLoading(false)
    }
  }, [session, convertCategoryTree, showOnlyTO])

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ä–µ–≤–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ session
  React.useEffect(() => {
    loadCategoryTree()
  }, [loadCategoryTree])

  if (loading) {
    return (
      <div className={`p-4 ${className}`}>
        <div className="text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>
      </div>
    )
  }

  if (!session?.vehicleId) {
    return (
      <div className={`p-4 ${className}`}>
        <div className="text-center text-gray-500">
          –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        </div>
      </div>
    )
  }

  if (treeData.length === 0) {
    return (
      <div className={`p-4 ${className}`}>
        <div className="text-center text-gray-500">
          –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        </div>
      </div>
    )
  }

  return (
    <div className={`p-4 h-[600px] overflow-y-auto ${className}`}>
      <div className="flex justify-between items-center mb-4">
        <h3 className="font-semibold text-lg text-gray-900">
          –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π
        </h3>
        
      </div>
      
      {showOnlyTO && treeData.length === 0 && !loading && (
        <div className="text-center text-amber-600 bg-amber-50 p-3 rounded mb-4">
          –î–µ—Ç–∞–ª–∏ –¢–û –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. <br />
          <button 
            onClick={() => setShowOnlyTO(false)}
            className="text-amber-700 underline hover:text-amber-800"
          >
            –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          </button>
        </div>
      )}
      
      <ul>
        {treeData.map((node) => (
          <LazyTreeItem 
            node={node} 
            key={`${node.type}-${node.id}-${node.name}`} 
            animated 
            onNodeUpdate={handleNodeUpdate}
            onQuickGroupSelected={onQuickGroupSelected}
            onQuickGroupLoading={onQuickGroupLoading}
          />
        ))}
      </ul>
    </div>
  )
}
